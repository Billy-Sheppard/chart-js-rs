{
  "definitions": {
    "ScriptableLineSegmentContext": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "segment",
          "title": "ScriptableLineSegmentContext.type"
        },
        "p0": {
          "$ref": "#/definitions/PointElement",
          "title": "ScriptableLineSegmentContext.p0"
        },
        "p1": {
          "$ref": "#/definitions/PointElement",
          "title": "ScriptableLineSegmentContext.p1"
        },
        "p0DataIndex": {
          "type": "number",
          "title": "ScriptableLineSegmentContext.p0DataIndex"
        },
        "p1DataIndex": {
          "type": "number",
          "title": "ScriptableLineSegmentContext.p1DataIndex"
        },
        "datasetIndex": {
          "type": "number",
          "title": "ScriptableLineSegmentContext.datasetIndex"
        }
      },
      "required": [
        "type",
        "p0",
        "p1",
        "p0DataIndex",
        "p1DataIndex",
        "datasetIndex"
      ],
      "additionalProperties": false,
      "title": "ScriptableLineSegmentContext"
    },
    "ParsingOptions": {
      "type": "object",
      "properties": {
        "parsing": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "ParsingOptions.parsing"
            },
            {
              "type": "boolean",
              "const": false,
              "title": "ParsingOptions.parsing"
            }
          ],
          "title": "ParsingOptions.parsing",
          "description": "How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally."
        },
        "normalized": {
          "type": "boolean",
          "title": "ParsingOptions.normalized",
          "description": "Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so."
        }
      },
      "required": [
        "parsing",
        "normalized"
      ],
      "additionalProperties": false,
      "title": "ParsingOptions"
    },
    "ControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "indexAxis": {
          "type": "string",
          "enum": [
            "x",
            "y"
          ],
          "title": "ControllerDatasetOptions.indexAxis",
          "description": "The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts.",
          "default": "'x'"
        },
        "clip": {
          "anyOf": [
            {
              "type": "number",
              "title": "ControllerDatasetOptions.clip"
            },
            {
              "$ref": "#/definitions/ChartArea",
              "title": "ControllerDatasetOptions.clip"
            }
          ],
          "title": "ControllerDatasetOptions.clip",
          "description": "How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0}"
        },
        "label": {
          "type": "string",
          "title": "ControllerDatasetOptions.label",
          "description": "The label for the dataset which appears in the legend and tooltips."
        },
        "order": {
          "type": "number",
          "title": "ControllerDatasetOptions.order",
          "description": "The drawing order of dataset. Also affects order for stacking, tooltip and legend."
        },
        "stack": {
          "type": "string",
          "title": "ControllerDatasetOptions.stack",
          "description": "The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack)."
        },
        "hidden": {
          "type": "boolean",
          "title": "ControllerDatasetOptions.hidden",
          "description": "Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart.",
          "default": "false"
        }
      },
      "required": [
        "indexAxis",
        "clip",
        "label",
        "order",
        "stack",
        "hidden"
      ],
      "additionalProperties": false,
      "title": "ControllerDatasetOptions"
    },
    "BarControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "xAxisID": {
          "type": "string",
          "title": "BarControllerDatasetOptions.xAxisID",
          "description": "The ID of the x axis to plot this dataset on."
        },
        "yAxisID": {
          "type": "string",
          "title": "BarControllerDatasetOptions.yAxisID",
          "description": "The ID of the y axis to plot this dataset on."
        },
        "barPercentage": {
          "type": "number",
          "title": "BarControllerDatasetOptions.barPercentage",
          "description": "Percent (0-1) of the available width each bar should be within the category width. 1.0 will take the whole category width and put the bars right next to each other.",
          "default": "0.9"
        },
        "categoryPercentage": {
          "type": "number",
          "title": "BarControllerDatasetOptions.categoryPercentage",
          "description": "Percent (0-1) of the available width each category should be within the sample width.",
          "default": "0.8"
        },
        "barThickness": {
          "anyOf": [
            {
              "type": "number",
              "title": "BarControllerDatasetOptions.barThickness"
            },
            {
              "type": "string",
              "const": "flex",
              "title": "BarControllerDatasetOptions.barThickness"
            }
          ],
          "title": "BarControllerDatasetOptions.barThickness",
          "description": "Manually set width of each bar in pixels. If set to 'flex', it computes \"optimal\" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval."
        },
        "maxBarThickness": {
          "type": "number",
          "title": "BarControllerDatasetOptions.maxBarThickness",
          "description": "Set this to ensure that bars are not sized thicker than this."
        },
        "minBarLength": {
          "type": "number",
          "title": "BarControllerDatasetOptions.minBarLength",
          "description": "Set this to ensure that bars have a minimum length in pixels."
        },
        "pointStyle": {
          "$ref": "#/definitions/PointStyle",
          "title": "BarControllerDatasetOptions.pointStyle",
          "description": "Point style for the legend",
          "default": "'circle;"
        }
      },
      "required": [
        "xAxisID",
        "yAxisID",
        "barPercentage",
        "categoryPercentage",
        "barThickness",
        "maxBarThickness",
        "minBarLength",
        "pointStyle"
      ],
      "additionalProperties": false,
      "title": "BarControllerDatasetOptions"
    },
    "BarControllerChartOptions": {
      "type": "object",
      "properties": {
        "skipNull": {
          "type": "boolean",
          "title": "BarControllerChartOptions.skipNull",
          "description": "Should null or undefined values be omitted from drawing"
        }
      },
      "additionalProperties": false,
      "title": "BarControllerChartOptions"
    },
    "BarController": {
      "$ref": "#/definitions/DatasetController",
      "title": "BarController"
    },
    "BubbleControllerDatasetOptions": {
      "type": "object",
      "additionalProperties": false,
      "title": "BubbleControllerDatasetOptions"
    },
    "BubbleDataPoint": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "BubbleDataPoint.x",
          "description": "X Value"
        },
        "y": {
          "type": "number",
          "title": "BubbleDataPoint.y",
          "description": "Y Value"
        },
        "r": {
          "type": "number",
          "title": "BubbleDataPoint.r",
          "description": "Bubble radius in pixels (not scaled)."
        }
      },
      "required": [
        "x",
        "y",
        "r"
      ],
      "additionalProperties": false,
      "title": "BubbleDataPoint"
    },
    "BubbleController": {
      "$ref": "#/definitions/DatasetController",
      "title": "BubbleController"
    },
    "LineControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "xAxisID": {
          "type": "string",
          "title": "LineControllerDatasetOptions.xAxisID",
          "description": "The ID of the x axis to plot this dataset on."
        },
        "yAxisID": {
          "type": "string",
          "title": "LineControllerDatasetOptions.yAxisID",
          "description": "The ID of the y axis to plot this dataset on."
        },
        "spanGaps": {
          "title": "LineControllerDatasetOptions.spanGaps",
          "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used.",
          "default": "false",
          "type": [
            "boolean",
            "number"
          ]
        },
        "showLine": {
          "type": "boolean",
          "title": "LineControllerDatasetOptions.showLine"
        }
      },
      "required": [
        "xAxisID",
        "yAxisID",
        "spanGaps",
        "showLine"
      ],
      "additionalProperties": false,
      "title": "LineControllerDatasetOptions"
    },
    "LineControllerChartOptions": {
      "type": "object",
      "properties": {
        "spanGaps": {
          "title": "LineControllerChartOptions.spanGaps",
          "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used.",
          "default": "false",
          "type": [
            "boolean",
            "number"
          ]
        },
        "showLine": {
          "type": "boolean",
          "title": "LineControllerChartOptions.showLine",
          "description": "If false, the lines between points are not drawn.",
          "default": "true"
        }
      },
      "required": [
        "spanGaps",
        "showLine"
      ],
      "additionalProperties": false,
      "title": "LineControllerChartOptions"
    },
    "LineController": {
      "$ref": "#/definitions/DatasetController",
      "title": "LineController"
    },
    "ScatterControllerDatasetOptions": {
      "$ref": "#/definitions/LineControllerDatasetOptions",
      "title": "ScatterControllerDatasetOptions"
    },
    "ScatterDataPoint": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "ScatterDataPoint.x"
        },
        "y": {
          "type": "number",
          "title": "ScatterDataPoint.y"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "ScatterDataPoint"
    },
    "ScatterControllerChartOptions": {
      "$ref": "#/definitions/LineControllerChartOptions",
      "title": "ScatterControllerChartOptions"
    },
    "ScatterController": {
      "$ref": "#/definitions/LineController",
      "title": "ScatterController"
    },
    "DoughnutControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "circumference": {
          "type": "number",
          "title": "DoughnutControllerDatasetOptions.circumference",
          "description": "Sweep to allow arcs to cover.",
          "default": "360"
        },
        "offset": {
          "type": "number",
          "title": "DoughnutControllerDatasetOptions.offset",
          "description": "Arc offset (in pixels)."
        },
        "rotation": {
          "type": "number",
          "title": "DoughnutControllerDatasetOptions.rotation",
          "description": "Starting angle to draw this dataset from.",
          "default": "0"
        },
        "weight": {
          "type": "number",
          "title": "DoughnutControllerDatasetOptions.weight",
          "description": "The relative thickness of the dataset. Providing a value for weight will cause the pie or doughnut dataset to be drawn with a thickness relative to the sum of all the dataset weight values.",
          "default": "1"
        },
        "spacing": {
          "type": "number",
          "title": "DoughnutControllerDatasetOptions.spacing",
          "description": "Similar to the `offset` option, but applies to all arcs. This can be used to to add spaces\nbetween arcs",
          "default": "0"
        }
      },
      "required": [
        "circumference",
        "offset",
        "rotation",
        "weight",
        "spacing"
      ],
      "additionalProperties": false,
      "title": "DoughnutControllerDatasetOptions"
    },
    "DoughnutAnimationOptions": {
      "type": "object",
      "properties": {
        "animateRotate": {
          "type": "boolean",
          "title": "DoughnutAnimationOptions.animateRotate",
          "description": "If true, the chart will animate in with a rotation animation. This property is in the options.animation object.",
          "default": "true"
        },
        "animateScale": {
          "type": "boolean",
          "title": "DoughnutAnimationOptions.animateScale",
          "description": "If true, will animate scaling the chart from the center outwards.",
          "default": "false"
        }
      },
      "required": [
        "animateRotate",
        "animateScale"
      ],
      "additionalProperties": false,
      "title": "DoughnutAnimationOptions"
    },
    "DoughnutControllerChartOptions": {
      "type": "object",
      "properties": {
        "circumference": {
          "type": "number",
          "title": "DoughnutControllerChartOptions.circumference",
          "description": "Sweep to allow arcs to cover.",
          "default": "360"
        },
        "cutout": {
          "title": "DoughnutControllerChartOptions.cutout",
          "description": "The portion of the chart that is cut out of the middle. ('50%' - for doughnut, 0 - for pie)\nString ending with '%' means percentage, number means pixels.",
          "default": "50"
        },
        "offset": {
          "type": "number",
          "title": "DoughnutControllerChartOptions.offset",
          "description": "Arc offset (in pixels)."
        },
        "radius": {
          "title": "DoughnutControllerChartOptions.radius",
          "description": "The outer radius of the chart. String ending with '%' means percentage of maximum radius, number means pixels.",
          "default": "'100%'"
        },
        "rotation": {
          "type": "number",
          "title": "DoughnutControllerChartOptions.rotation",
          "description": "Starting angle to draw arcs from.",
          "default": "0"
        },
        "spacing": {
          "type": "number",
          "title": "DoughnutControllerChartOptions.spacing",
          "description": "Spacing between the arcs",
          "default": "0"
        },
        "animation": {
          "anyOf": [
            {
              "type": "boolean",
              "const": false,
              "title": "DoughnutControllerChartOptions.animation"
            },
            {
              "$ref": "#/definitions/DoughnutAnimationOptions",
              "title": "DoughnutControllerChartOptions.animation"
            }
          ],
          "title": "DoughnutControllerChartOptions.animation"
        }
      },
      "required": [
        "circumference",
        "cutout",
        "offset",
        "radius",
        "rotation",
        "spacing",
        "animation"
      ],
      "additionalProperties": false,
      "title": "DoughnutControllerChartOptions"
    },
    "DoughnutDataPoint": {
      "type": "number",
      "title": "DoughnutDataPoint"
    },
    "DoughnutController": {
      "type": "object",
      "properties": {
        "innerRadius": {
          "type": "number",
          "title": "DoughnutController.innerRadius"
        },
        "outerRadius": {
          "type": "number",
          "title": "DoughnutController.outerRadius"
        },
        "offsetX": {
          "type": "number",
          "title": "DoughnutController.offsetX"
        },
        "offsetY": {
          "type": "number",
          "title": "DoughnutController.offsetY"
        }
      },
      "required": [
        "innerRadius",
        "outerRadius",
        "offsetX",
        "offsetY"
      ],
      "additionalProperties": false,
      "title": "DoughnutController"
    },
    "DoughnutMetaExtensions": {
      "type": "object",
      "properties": {
        "total": {
          "type": "number",
          "title": "DoughnutMetaExtensions.total"
        }
      },
      "required": [
        "total"
      ],
      "additionalProperties": false,
      "title": "DoughnutMetaExtensions"
    },
    "PieControllerDatasetOptions": {
      "$ref": "#/definitions/DoughnutControllerDatasetOptions",
      "title": "PieControllerDatasetOptions"
    },
    "PieControllerChartOptions": {
      "$ref": "#/definitions/DoughnutControllerChartOptions",
      "title": "PieControllerChartOptions"
    },
    "PieAnimationOptions": {
      "$ref": "#/definitions/DoughnutAnimationOptions",
      "title": "PieAnimationOptions"
    },
    "PieDataPoint": {
      "$ref": "#/definitions/DoughnutDataPoint",
      "title": "PieDataPoint"
    },
    "PieMetaExtensions": {
      "$ref": "#/definitions/DoughnutMetaExtensions",
      "title": "PieMetaExtensions"
    },
    "PieController": {
      "$ref": "#/definitions/DoughnutController",
      "title": "PieController"
    },
    "PolarAreaControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "angle": {
          "type": "number",
          "title": "PolarAreaControllerDatasetOptions.angle",
          "description": "Arc angle to cover. - for polar only",
          "default": "circumference / (arc count)"
        }
      },
      "required": [
        "angle"
      ],
      "additionalProperties": false,
      "title": "PolarAreaControllerDatasetOptions"
    },
    "PolarAreaAnimationOptions": {
      "$ref": "#/definitions/DoughnutAnimationOptions",
      "title": "PolarAreaAnimationOptions"
    },
    "PolarAreaControllerChartOptions": {
      "type": "object",
      "properties": {
        "startAngle": {
          "type": "number",
          "title": "PolarAreaControllerChartOptions.startAngle",
          "description": "Starting angle to draw arcs for the first item in a dataset. In degrees, 0 is at top.",
          "default": "0"
        },
        "animation": {
          "anyOf": [
            {
              "type": "boolean",
              "const": false,
              "title": "PolarAreaControllerChartOptions.animation"
            },
            {
              "$ref": "#/definitions/PolarAreaAnimationOptions",
              "title": "PolarAreaControllerChartOptions.animation"
            }
          ],
          "title": "PolarAreaControllerChartOptions.animation"
        }
      },
      "required": [
        "startAngle",
        "animation"
      ],
      "additionalProperties": false,
      "title": "PolarAreaControllerChartOptions"
    },
    "PolarAreaController": {
      "type": "object",
      "additionalProperties": false,
      "title": "PolarAreaController"
    },
    "RadarControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "xAxisID": {
          "type": "string",
          "title": "RadarControllerDatasetOptions.xAxisID",
          "description": "The ID of the x axis to plot this dataset on."
        },
        "yAxisID": {
          "type": "string",
          "title": "RadarControllerDatasetOptions.yAxisID",
          "description": "The ID of the y axis to plot this dataset on."
        },
        "spanGaps": {
          "title": "RadarControllerDatasetOptions.spanGaps",
          "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used.",
          "type": [
            "boolean",
            "number"
          ]
        },
        "showLine": {
          "type": "boolean",
          "title": "RadarControllerDatasetOptions.showLine",
          "description": "If false, the line is not drawn for this dataset."
        }
      },
      "required": [
        "xAxisID",
        "yAxisID",
        "spanGaps",
        "showLine"
      ],
      "additionalProperties": false,
      "title": "RadarControllerDatasetOptions"
    },
    "RadarControllerChartOptions": {
      "$ref": "#/definitions/LineControllerChartOptions",
      "title": "RadarControllerChartOptions"
    },
    "RadarController": {
      "$ref": "#/definitions/DatasetController",
      "title": "RadarController"
    },
    "ActiveDataPoint": {
      "type": "object",
      "properties": {
        "datasetIndex": {
          "type": "number",
          "title": "ActiveDataPoint.datasetIndex"
        },
        "index": {
          "type": "number",
          "title": "ActiveDataPoint.index"
        }
      },
      "required": [
        "datasetIndex",
        "index"
      ],
      "additionalProperties": false,
      "title": "ActiveDataPoint"
    },
    "ActiveElement": {
      "type": "object",
      "properties": {
        "element": {
          "$ref": "#/definitions/Element",
          "title": "ActiveElement.element"
        }
      },
      "required": [
        "element"
      ],
      "additionalProperties": false,
      "title": "ActiveElement"
    },
    "ChartItem": {
      "anyOf": [
        {
          "type": "string",
          "title": "ChartItem"
        },
        {
          "$ref": "#/definitions/CanvasRenderingContext2D",
          "title": "ChartItem"
        },
        {
          "$ref": "#/definitions/HTMLCanvasElement",
          "title": "ChartItem"
        },
        {
          "type": "object",
          "properties": {
            "canvas": {
              "$ref": "#/definitions/HTMLCanvasElement",
              "title": "ChartItem.canvas"
            }
          },
          "required": [
            "canvas"
          ],
          "additionalProperties": false,
          "title": "ChartItem"
        }
      ],
      "title": "ChartItem"
    },
    "UpdateMode": {
      "title": "UpdateMode"
    },
    "DatasetControllerChartComponent": {
      "type": "object",
      "properties": {
        "defaults": {
          "type": "object",
          "properties": {
            "datasetElementType": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "DatasetControllerChartComponent.defaults.datasetElementType"
                },
                {
                  "type": "null",
                  "title": "DatasetControllerChartComponent.defaults.datasetElementType"
                },
                {
                  "type": "boolean",
                  "const": false,
                  "title": "DatasetControllerChartComponent.defaults.datasetElementType"
                }
              ],
              "title": "DatasetControllerChartComponent.defaults.datasetElementType"
            },
            "dataElementType": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "DatasetControllerChartComponent.defaults.dataElementType"
                },
                {
                  "type": "null",
                  "title": "DatasetControllerChartComponent.defaults.dataElementType"
                },
                {
                  "type": "boolean",
                  "const": false,
                  "title": "DatasetControllerChartComponent.defaults.dataElementType"
                }
              ],
              "title": "DatasetControllerChartComponent.defaults.dataElementType"
            }
          },
          "additionalProperties": false,
          "title": "DatasetControllerChartComponent.defaults"
        }
      },
      "required": [
        "defaults"
      ],
      "additionalProperties": false,
      "title": "DatasetControllerChartComponent"
    },
    "Defaults": {
      "type": "object",
      "properties": {
        "scale": {
          "$ref": "#/definitions/ScaleOptionsByType",
          "title": "Defaults.scale"
        },
        "scales": {
          "title": "Defaults.scales"
        }
      },
      "required": [
        "scale",
        "scales"
      ],
      "additionalProperties": false,
      "title": "Defaults"
    },
    "Overrides": {
      "title": "Overrides"
    },
    "InteractionOptions": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "title": "InteractionOptions.axis"
        },
        "intersect": {
          "type": "boolean",
          "title": "InteractionOptions.intersect"
        },
        "includeInvisible": {
          "type": "boolean",
          "title": "InteractionOptions.includeInvisible"
        }
      },
      "additionalProperties": false,
      "title": "InteractionOptions"
    },
    "InteractionItem": {
      "type": "object",
      "properties": {
        "element": {
          "$ref": "#/definitions/Element",
          "title": "InteractionItem.element"
        },
        "datasetIndex": {
          "type": "number",
          "title": "InteractionItem.datasetIndex"
        },
        "index": {
          "type": "number",
          "title": "InteractionItem.index"
        }
      },
      "required": [
        "element",
        "datasetIndex",
        "index"
      ],
      "additionalProperties": false,
      "title": "InteractionItem"
    },
    "InteractionModeFunction": {
      "title": "InteractionModeFunction"
    },
    "InteractionModeMap": {
      "type": "object",
      "properties": {
        "index": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.index",
          "description": "Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\nIf the options.intersect mode is false, we find the nearest item and return the items at the same index as that item"
        },
        "dataset": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.dataset",
          "description": "Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\nIf the options.intersect is false, we find the nearest item and return the items in that dataset"
        },
        "point": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.point",
          "description": "Point mode returns all elements that hit test based on the event position\nof the event"
        },
        "nearest": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.nearest",
          "description": "nearest mode returns the element closest to the point"
        },
        "x": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.x",
          "description": "x mode returns the elements that hit-test at the current x coordinate"
        },
        "y": {
          "$ref": "#/definitions/InteractionModeFunction",
          "title": "InteractionModeMap.y",
          "description": "y mode returns the elements that hit-test at the current y coordinate"
        }
      },
      "required": [
        "index",
        "dataset",
        "point",
        "nearest",
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "InteractionModeMap"
    },
    "InteractionMode": {
      "title": "InteractionMode"
    },
    "ChartComponentLike": {
      "anyOf": [
        {
          "$ref": "#/definitions/ChartComponent",
          "title": "ChartComponentLike"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChartComponent",
            "title": "ChartComponentLike.[]"
          },
          "title": "ChartComponentLike.[]"
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ChartComponent"
          },
          "title": "ChartComponentLike"
        },
        {
          "$ref": "#/definitions/Plugin",
          "title": "ChartComponentLike"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plugin",
            "title": "ChartComponentLike.[]"
          },
          "title": "ChartComponentLike.[]"
        }
      ],
      "title": "ChartComponentLike"
    },
    "Registry": {
      "type": "object",
      "properties": {
        "controllers": {
          "title": "Registry.controllers"
        },
        "elements": {
          "title": "Registry.elements"
        },
        "plugins": {
          "title": "Registry.plugins"
        },
        "scales": {
          "title": "Registry.scales"
        }
      },
      "required": [
        "controllers",
        "elements",
        "plugins",
        "scales"
      ],
      "additionalProperties": false,
      "title": "Registry",
      "description": "Please use the module's default export which provides a singleton instance\nNote: class is exported for typedoc"
    },
    "Tick": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "title": "Tick.value"
        },
        "label": {
          "anyOf": [
            {
              "type": "string",
              "title": "Tick.label"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "title": "Tick.label.[]"
              },
              "title": "Tick.label.[]"
            }
          ],
          "title": "Tick.label"
        },
        "major": {
          "type": "boolean",
          "title": "Tick.major"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false,
      "title": "Tick"
    },
    "CoreScaleOptions": {
      "type": "object",
      "properties": {
        "display": {
          "anyOf": [
            {
              "type": "boolean",
              "title": "CoreScaleOptions.display"
            },
            {
              "type": "string",
              "const": "auto",
              "title": "CoreScaleOptions.display"
            }
          ],
          "title": "CoreScaleOptions.display",
          "description": "Controls the axis global visibility (visible when true, hidden when false). When display: 'auto', the axis is visible only if at least one associated dataset is visible.",
          "default": "true"
        },
        "alignToPixels": {
          "type": "boolean",
          "title": "CoreScaleOptions.alignToPixels",
          "description": "Align pixel values to device pixels"
        },
        "reverse": {
          "type": "boolean",
          "title": "CoreScaleOptions.reverse",
          "description": "Reverse the scale.",
          "default": "false"
        },
        "weight": {
          "type": "number",
          "title": "CoreScaleOptions.weight",
          "description": "The weight used to sort the axis. Higher weights are further away from the chart area.",
          "default": "true"
        }
      },
      "required": [
        "display",
        "alignToPixels",
        "reverse",
        "weight"
      ],
      "additionalProperties": false,
      "title": "CoreScaleOptions"
    },
    "ScriptableScaleContext": {
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "#/definitions/Chart",
          "title": "ScriptableScaleContext.chart"
        },
        "scale": {
          "$ref": "#/definitions/Scale",
          "title": "ScriptableScaleContext.scale"
        },
        "index": {
          "type": "number",
          "title": "ScriptableScaleContext.index"
        },
        "tick": {
          "$ref": "#/definitions/Tick",
          "title": "ScriptableScaleContext.tick"
        }
      },
      "required": [
        "chart",
        "scale",
        "index",
        "tick"
      ],
      "additionalProperties": false,
      "title": "ScriptableScaleContext"
    },
    "ScriptableScalePointLabelContext": {
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "#/definitions/Chart",
          "title": "ScriptableScalePointLabelContext.chart"
        },
        "scale": {
          "$ref": "#/definitions/Scale",
          "title": "ScriptableScalePointLabelContext.scale"
        },
        "index": {
          "type": "number",
          "title": "ScriptableScalePointLabelContext.index"
        },
        "label": {
          "type": "string",
          "title": "ScriptableScalePointLabelContext.label"
        }
      },
      "required": [
        "chart",
        "scale",
        "index",
        "label"
      ],
      "additionalProperties": false,
      "title": "ScriptableScalePointLabelContext"
    },
    "ChartEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "contextmenu",
            "mouseenter",
            "mousedown",
            "mousemove",
            "mouseup",
            "mouseout",
            "click",
            "dblclick",
            "keydown",
            "keypress",
            "keyup",
            "resize"
          ],
          "title": "ChartEvent.type"
        },
        "native": {
          "anyOf": [
            {
              "$ref": "#/definitions/Event",
              "title": "ChartEvent.native"
            },
            {
              "type": "null",
              "title": "ChartEvent.native"
            }
          ],
          "title": "ChartEvent.native"
        },
        "x": {
          "title": "ChartEvent.x",
          "type": [
            "number",
            "null"
          ]
        },
        "y": {
          "title": "ChartEvent.y",
          "type": [
            "number",
            "null"
          ]
        }
      },
      "required": [
        "type",
        "native",
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "ChartEvent"
    },
    "ChartComponent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ChartComponent.id"
        },
        "defaults": {
          "$ref": "#/definitions/AnyObject",
          "title": "ChartComponent.defaults"
        },
        "defaultRoutes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "ChartComponent.defaultRoutes"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false,
      "title": "ChartComponent"
    },
    "InteractionAxis": {
      "type": "string",
      "enum": [
        "x",
        "y",
        "xy",
        "r"
      ],
      "title": "InteractionAxis"
    },
    "CoreInteractionOptions": {
      "type": "object",
      "properties": {
        "mode": {
          "$ref": "#/definitions/InteractionMode",
          "title": "CoreInteractionOptions.mode",
          "description": "Sets which elements appear in the tooltip. See Interaction Modes for details.",
          "default": "'nearest'"
        },
        "intersect": {
          "type": "boolean",
          "title": "CoreInteractionOptions.intersect",
          "description": "if true, the hover mode only applies when the mouse position intersects an item on the chart.",
          "default": "true"
        },
        "axis": {
          "$ref": "#/definitions/InteractionAxis",
          "title": "CoreInteractionOptions.axis",
          "description": "Defines which directions are used in calculating distances. Defaults to 'x' for 'index' mode and 'xy' in dataset and 'nearest' modes."
        },
        "includeInvisible": {
          "type": "boolean",
          "title": "CoreInteractionOptions.includeInvisible",
          "description": "if true, the invisible points that are outside of the chart area will also be included when evaluating interactions.",
          "default": "false"
        }
      },
      "required": [
        "mode",
        "intersect",
        "axis",
        "includeInvisible"
      ],
      "additionalProperties": false,
      "title": "CoreInteractionOptions"
    },
    "EasingFunction": {
      "type": "string",
      "enum": [
        "linear",
        "easeInQuad",
        "easeOutQuad",
        "easeInOutQuad",
        "easeInCubic",
        "easeOutCubic",
        "easeInOutCubic",
        "easeInQuart",
        "easeOutQuart",
        "easeInOutQuart",
        "easeInQuint",
        "easeOutQuint",
        "easeInOutQuint",
        "easeInSine",
        "easeOutSine",
        "easeInOutSine",
        "easeInExpo",
        "easeOutExpo",
        "easeInOutExpo",
        "easeInCirc",
        "easeOutCirc",
        "easeInOutCirc",
        "easeInElastic",
        "easeOutElastic",
        "easeInOutElastic",
        "easeInBack",
        "easeOutBack",
        "easeInOutBack",
        "easeInBounce",
        "easeOutBounce",
        "easeInOutBounce"
      ],
      "title": "EasingFunction"
    },
    "FontSpec": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string",
          "title": "FontSpec.family",
          "description": "Default font family for all text, follows CSS font-family options.",
          "default": "\"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\""
        },
        "size": {
          "type": "number",
          "title": "FontSpec.size",
          "description": "Default font size (in px) for text. Does not apply to radialLinear scale point labels.",
          "default": "12"
        },
        "style": {
          "type": "string",
          "enum": [
            "normal",
            "italic",
            "oblique",
            "initial",
            "inherit"
          ],
          "title": "FontSpec.style",
          "description": "Default font style. Does not apply to tooltip title or footer. Does not apply to chart title. Follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit)",
          "default": "'normal'"
        },
        "weight": {
          "title": "FontSpec.weight",
          "description": "Default font weight (boldness). (see MDN).",
          "type": [
            "string",
            "null"
          ]
        },
        "lineHeight": {
          "title": "FontSpec.lineHeight",
          "description": "Height of an individual line of text (see MDN).",
          "default": "1.2",
          "type": [
            "number",
            "string"
          ]
        }
      },
      "required": [
        "family",
        "size",
        "style",
        "weight",
        "lineHeight"
      ],
      "additionalProperties": false,
      "title": "FontSpec"
    },
    "TextAlign": {
      "type": "string",
      "enum": [
        "left",
        "center",
        "right"
      ],
      "title": "TextAlign"
    },
    "Align": {
      "type": "string",
      "enum": [
        "start",
        "center",
        "end"
      ],
      "title": "Align"
    },
    "VisualElement": {
      "type": "object",
      "additionalProperties": false,
      "title": "VisualElement"
    },
    "CommonElementOptions": {
      "type": "object",
      "properties": {
        "borderWidth": {
          "type": "number",
          "title": "CommonElementOptions.borderWidth"
        },
        "borderColor": {
          "$ref": "#/definitions/Color",
          "title": "CommonElementOptions.borderColor"
        },
        "backgroundColor": {
          "$ref": "#/definitions/Color",
          "title": "CommonElementOptions.backgroundColor"
        }
      },
      "required": [
        "borderWidth",
        "borderColor",
        "backgroundColor"
      ],
      "additionalProperties": false,
      "title": "CommonElementOptions"
    },
    "CommonHoverOptions": {
      "type": "object",
      "properties": {
        "hoverBorderWidth": {
          "type": "number",
          "title": "CommonHoverOptions.hoverBorderWidth"
        },
        "hoverBorderColor": {
          "$ref": "#/definitions/Color",
          "title": "CommonHoverOptions.hoverBorderColor"
        },
        "hoverBackgroundColor": {
          "$ref": "#/definitions/Color",
          "title": "CommonHoverOptions.hoverBackgroundColor"
        }
      },
      "required": [
        "hoverBorderWidth",
        "hoverBorderColor",
        "hoverBackgroundColor"
      ],
      "additionalProperties": false,
      "title": "CommonHoverOptions"
    },
    "Segment": {
      "type": "object",
      "properties": {
        "start": {
          "type": "number",
          "title": "Segment.start"
        },
        "end": {
          "type": "number",
          "title": "Segment.end"
        },
        "loop": {
          "type": "boolean",
          "title": "Segment.loop"
        }
      },
      "required": [
        "start",
        "end",
        "loop"
      ],
      "additionalProperties": false,
      "title": "Segment"
    },
    "ArcProps": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "ArcProps.x"
        },
        "y": {
          "type": "number",
          "title": "ArcProps.y"
        },
        "startAngle": {
          "type": "number",
          "title": "ArcProps.startAngle"
        },
        "endAngle": {
          "type": "number",
          "title": "ArcProps.endAngle"
        },
        "innerRadius": {
          "type": "number",
          "title": "ArcProps.innerRadius"
        },
        "outerRadius": {
          "type": "number",
          "title": "ArcProps.outerRadius"
        },
        "circumference": {
          "type": "number",
          "title": "ArcProps.circumference"
        }
      },
      "required": [
        "x",
        "y",
        "startAngle",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "circumference"
      ],
      "additionalProperties": false,
      "title": "ArcProps"
    },
    "ArcBorderRadius": {
      "type": "object",
      "properties": {
        "outerStart": {
          "type": "number",
          "title": "ArcBorderRadius.outerStart"
        },
        "outerEnd": {
          "type": "number",
          "title": "ArcBorderRadius.outerEnd"
        },
        "innerStart": {
          "type": "number",
          "title": "ArcBorderRadius.innerStart"
        },
        "innerEnd": {
          "type": "number",
          "title": "ArcBorderRadius.innerEnd"
        }
      },
      "required": [
        "outerStart",
        "outerEnd",
        "innerStart",
        "innerEnd"
      ],
      "additionalProperties": false,
      "title": "ArcBorderRadius"
    },
    "ArcOptions": {
      "type": "object",
      "properties": {
        "borderAlign": {
          "type": "string",
          "enum": [
            "center",
            "inner"
          ],
          "title": "ArcOptions.borderAlign",
          "description": "Arc stroke alignment."
        },
        "borderJoinStyle": {
          "$ref": "#/definitions/CanvasLineJoin",
          "title": "ArcOptions.borderJoinStyle",
          "description": "Line join style. See MDN. Default is 'round' when `borderAlign` is 'inner', else 'bevel'."
        },
        "borderRadius": {
          "anyOf": [
            {
              "type": "number",
              "title": "ArcOptions.borderRadius"
            },
            {
              "$ref": "#/definitions/ArcBorderRadius",
              "title": "ArcOptions.borderRadius"
            }
          ],
          "title": "ArcOptions.borderRadius",
          "description": "Sets the border radius for arcs",
          "default": "0"
        },
        "offset": {
          "type": "number",
          "title": "ArcOptions.offset",
          "description": "Arc offset (in pixels)."
        }
      },
      "required": [
        "borderAlign",
        "borderJoinStyle",
        "borderRadius",
        "offset"
      ],
      "additionalProperties": false,
      "title": "ArcOptions"
    },
    "ArcHoverOptions": {
      "type": "object",
      "properties": {
        "hoverOffset": {
          "type": "number",
          "title": "ArcHoverOptions.hoverOffset"
        }
      },
      "required": [
        "hoverOffset"
      ],
      "additionalProperties": false,
      "title": "ArcHoverOptions"
    },
    "LineProps": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Point",
            "title": "LineProps.points.[]"
          },
          "title": "LineProps.points"
        }
      },
      "required": [
        "points"
      ],
      "additionalProperties": false,
      "title": "LineProps"
    },
    "LineOptions": {
      "type": "object",
      "properties": {
        "borderCapStyle": {
          "$ref": "#/definitions/CanvasLineCap",
          "title": "LineOptions.borderCapStyle",
          "description": "Line cap style. See MDN.",
          "default": "'butt'"
        },
        "borderDash": {
          "type": "array",
          "items": {
            "type": "number",
            "title": "LineOptions.borderDash.[]"
          },
          "title": "LineOptions.borderDash",
          "description": "Line dash. See MDN.",
          "default": "[]"
        },
        "borderDashOffset": {
          "type": "number",
          "title": "LineOptions.borderDashOffset",
          "description": "Line dash offset. See MDN.",
          "default": "0.0"
        },
        "borderJoinStyle": {
          "$ref": "#/definitions/CanvasLineJoin",
          "title": "LineOptions.borderJoinStyle",
          "description": "Line join style. See MDN.",
          "default": "'miter'"
        },
        "capBezierPoints": {
          "type": "boolean",
          "title": "LineOptions.capBezierPoints",
          "description": "true to keep Bézier control inside the chart, false for no restriction.",
          "default": "true"
        },
        "cubicInterpolationMode": {
          "type": "string",
          "enum": [
            "default",
            "monotone"
          ],
          "title": "LineOptions.cubicInterpolationMode",
          "description": "Interpolation mode to apply.",
          "default": "'default'"
        },
        "tension": {
          "type": "number",
          "title": "LineOptions.tension",
          "description": "Bézier curve tension (0 for no Bézier curves).",
          "default": "0"
        },
        "stepped": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "before",
                "after",
                "middle"
              ],
              "title": "LineOptions.stepped"
            },
            {
              "type": "boolean",
              "title": "LineOptions.stepped"
            }
          ],
          "title": "LineOptions.stepped",
          "description": "true to show the line as a stepped line (tension will be ignored).",
          "default": "false"
        },
        "fill": {
          "anyOf": [
            {
              "$ref": "#/definitions/FillTarget",
              "title": "LineOptions.fill"
            },
            {
              "$ref": "#/definitions/ComplexFillTarget",
              "title": "LineOptions.fill"
            }
          ],
          "title": "LineOptions.fill",
          "description": "Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end"
        },
        "spanGaps": {
          "title": "LineOptions.spanGaps",
          "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used.",
          "type": [
            "boolean",
            "number"
          ]
        },
        "segment": {
          "type": "object",
          "properties": {
            "backgroundColor": {
              "title": "LineOptions.segment.backgroundColor"
            },
            "borderColor": {
              "title": "LineOptions.segment.borderColor"
            },
            "borderCapStyle": {
              "title": "LineOptions.segment.borderCapStyle"
            },
            "borderDash": {
              "title": "LineOptions.segment.borderDash"
            },
            "borderDashOffset": {
              "title": "LineOptions.segment.borderDashOffset"
            },
            "borderJoinStyle": {
              "title": "LineOptions.segment.borderJoinStyle"
            },
            "borderWidth": {
              "title": "LineOptions.segment.borderWidth"
            }
          },
          "required": [
            "backgroundColor",
            "borderColor",
            "borderCapStyle",
            "borderDash",
            "borderDashOffset",
            "borderJoinStyle",
            "borderWidth"
          ],
          "additionalProperties": false,
          "title": "LineOptions.segment"
        }
      },
      "required": [
        "borderCapStyle",
        "borderDash",
        "borderDashOffset",
        "borderJoinStyle",
        "capBezierPoints",
        "cubicInterpolationMode",
        "tension",
        "stepped",
        "fill",
        "spanGaps",
        "segment"
      ],
      "additionalProperties": false,
      "title": "LineOptions"
    },
    "LineHoverOptions": {
      "type": "object",
      "properties": {
        "hoverBorderCapStyle": {
          "$ref": "#/definitions/CanvasLineCap",
          "title": "LineHoverOptions.hoverBorderCapStyle"
        },
        "hoverBorderDash": {
          "type": "array",
          "items": {
            "type": "number",
            "title": "LineHoverOptions.hoverBorderDash.[]"
          },
          "title": "LineHoverOptions.hoverBorderDash"
        },
        "hoverBorderDashOffset": {
          "type": "number",
          "title": "LineHoverOptions.hoverBorderDashOffset"
        },
        "hoverBorderJoinStyle": {
          "$ref": "#/definitions/CanvasLineJoin",
          "title": "LineHoverOptions.hoverBorderJoinStyle"
        }
      },
      "required": [
        "hoverBorderCapStyle",
        "hoverBorderDash",
        "hoverBorderDashOffset",
        "hoverBorderJoinStyle"
      ],
      "additionalProperties": false,
      "title": "LineHoverOptions"
    },
    "PointProps": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "PointProps.x"
        },
        "y": {
          "type": "number",
          "title": "PointProps.y"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "PointProps"
    },
    "PointStyle": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "circle",
            "cross",
            "crossRot",
            "dash",
            "line",
            "rect",
            "rectRounded",
            "rectRot",
            "star",
            "triangle"
          ],
          "title": "PointStyle"
        },
        {
          "$ref": "#/definitions/HTMLImageElement",
          "title": "PointStyle"
        },
        {
          "$ref": "#/definitions/HTMLCanvasElement",
          "title": "PointStyle"
        }
      ],
      "title": "PointStyle"
    },
    "PointOptions": {
      "type": "object",
      "properties": {
        "radius": {
          "type": "number",
          "title": "PointOptions.radius",
          "description": "Point radius",
          "default": "3"
        },
        "hitRadius": {
          "type": "number",
          "title": "PointOptions.hitRadius",
          "description": "Extra radius added to point radius for hit detection.",
          "default": "1"
        },
        "pointStyle": {
          "$ref": "#/definitions/PointStyle",
          "title": "PointOptions.pointStyle",
          "description": "Point style",
          "default": "'circle;"
        },
        "rotation": {
          "type": "number",
          "title": "PointOptions.rotation",
          "description": "Point rotation (in degrees).",
          "default": "0"
        },
        "drawActiveElementsOnTop": {
          "type": "boolean",
          "title": "PointOptions.drawActiveElementsOnTop",
          "description": "Draw the active elements over the other elements of the dataset,",
          "default": "true"
        }
      },
      "required": [
        "radius",
        "hitRadius",
        "pointStyle",
        "rotation",
        "drawActiveElementsOnTop"
      ],
      "additionalProperties": false,
      "title": "PointOptions"
    },
    "PointHoverOptions": {
      "type": "object",
      "properties": {
        "hoverRadius": {
          "type": "number",
          "title": "PointHoverOptions.hoverRadius",
          "description": "Point radius when hovered.",
          "default": "4"
        }
      },
      "required": [
        "hoverRadius"
      ],
      "additionalProperties": false,
      "title": "PointHoverOptions"
    },
    "PointPrefixedOptions": {
      "type": "object",
      "properties": {
        "pointBackgroundColor": {
          "$ref": "#/definitions/Color",
          "title": "PointPrefixedOptions.pointBackgroundColor",
          "description": "The fill color for points."
        },
        "pointBorderColor": {
          "$ref": "#/definitions/Color",
          "title": "PointPrefixedOptions.pointBorderColor",
          "description": "The border color for points."
        },
        "pointBorderWidth": {
          "type": "number",
          "title": "PointPrefixedOptions.pointBorderWidth",
          "description": "The width of the point border in pixels."
        },
        "pointHitRadius": {
          "type": "number",
          "title": "PointPrefixedOptions.pointHitRadius",
          "description": "The pixel size of the non-displayed point that reacts to mouse events."
        },
        "pointRadius": {
          "type": "number",
          "title": "PointPrefixedOptions.pointRadius",
          "description": "The radius of the point shape. If set to 0, the point is not rendered."
        },
        "pointRotation": {
          "type": "number",
          "title": "PointPrefixedOptions.pointRotation",
          "description": "The rotation of the point in degrees."
        },
        "pointStyle": {
          "$ref": "#/definitions/PointStyle",
          "title": "PointPrefixedOptions.pointStyle",
          "description": "Style of the point."
        }
      },
      "required": [
        "pointBackgroundColor",
        "pointBorderColor",
        "pointBorderWidth",
        "pointHitRadius",
        "pointRadius",
        "pointRotation",
        "pointStyle"
      ],
      "additionalProperties": false,
      "title": "PointPrefixedOptions"
    },
    "PointPrefixedHoverOptions": {
      "type": "object",
      "properties": {
        "pointHoverBackgroundColor": {
          "$ref": "#/definitions/Color",
          "title": "PointPrefixedHoverOptions.pointHoverBackgroundColor",
          "description": "Point background color when hovered."
        },
        "pointHoverBorderColor": {
          "$ref": "#/definitions/Color",
          "title": "PointPrefixedHoverOptions.pointHoverBorderColor",
          "description": "Point border color when hovered."
        },
        "pointHoverBorderWidth": {
          "type": "number",
          "title": "PointPrefixedHoverOptions.pointHoverBorderWidth",
          "description": "Border width of point when hovered."
        },
        "pointHoverRadius": {
          "type": "number",
          "title": "PointPrefixedHoverOptions.pointHoverRadius",
          "description": "The radius of the point when hovered."
        }
      },
      "required": [
        "pointHoverBackgroundColor",
        "pointHoverBorderColor",
        "pointHoverBorderWidth",
        "pointHoverRadius"
      ],
      "additionalProperties": false,
      "title": "PointPrefixedHoverOptions"
    },
    "BarProps": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "BarProps.x"
        },
        "y": {
          "type": "number",
          "title": "BarProps.y"
        },
        "base": {
          "type": "number",
          "title": "BarProps.base"
        },
        "horizontal": {
          "type": "boolean",
          "title": "BarProps.horizontal"
        },
        "width": {
          "type": "number",
          "title": "BarProps.width"
        },
        "height": {
          "type": "number",
          "title": "BarProps.height"
        }
      },
      "required": [
        "x",
        "y",
        "base",
        "horizontal",
        "width",
        "height"
      ],
      "additionalProperties": false,
      "title": "BarProps"
    },
    "BarOptions": {
      "type": "object",
      "properties": {
        "base": {
          "type": "number",
          "title": "BarOptions.base",
          "description": "The base value for the bar in data units along the value axis."
        },
        "borderSkipped": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "start",
                "end",
                "left",
                "right",
                "bottom",
                "top",
                "middle"
              ],
              "title": "BarOptions.borderSkipped"
            },
            {
              "type": "boolean",
              "const": false,
              "title": "BarOptions.borderSkipped"
            }
          ],
          "title": "BarOptions.borderSkipped",
          "description": "Skipped (excluded) border: 'start', 'end', 'left',  'right', 'bottom', 'top', 'middle' or false (none).",
          "default": "'start'"
        },
        "borderRadius": {
          "anyOf": [
            {
              "type": "number",
              "title": "BarOptions.borderRadius"
            },
            {
              "$ref": "#/definitions/BorderRadius",
              "title": "BarOptions.borderRadius"
            }
          ],
          "title": "BarOptions.borderRadius",
          "description": "Border radius",
          "default": "0"
        },
        "inflateAmount": {
          "anyOf": [
            {
              "type": "number",
              "title": "BarOptions.inflateAmount"
            },
            {
              "type": "string",
              "const": "auto",
              "title": "BarOptions.inflateAmount"
            }
          ],
          "title": "BarOptions.inflateAmount",
          "description": "Amount to inflate the rectangle(s). This can be used to hide artifacts between bars.\nUnit is pixels. 'auto' translates to 0.33 pixels when barPercentage * categoryPercentage is 1, else 0.",
          "default": "'auto'"
        },
        "borderWidth": {
          "anyOf": [
            {
              "type": "number",
              "title": "BarOptions.borderWidth"
            },
            {
              "type": "object",
              "properties": {
                "top": {
                  "type": "number",
                  "title": "BarOptions.borderWidth.top"
                },
                "right": {
                  "type": "number",
                  "title": "BarOptions.borderWidth.right"
                },
                "bottom": {
                  "type": "number",
                  "title": "BarOptions.borderWidth.bottom"
                },
                "left": {
                  "type": "number",
                  "title": "BarOptions.borderWidth.left"
                }
              },
              "additionalProperties": false,
              "title": "BarOptions.borderWidth"
            }
          ],
          "title": "BarOptions.borderWidth",
          "description": "Width of the border, number for all sides, object to specify width for each side specifically",
          "default": "0"
        }
      },
      "required": [
        "base",
        "borderSkipped",
        "borderRadius",
        "inflateAmount",
        "borderWidth"
      ],
      "additionalProperties": false,
      "title": "BarOptions"
    },
    "BorderRadius": {
      "type": "object",
      "properties": {
        "topLeft": {
          "type": "number",
          "title": "BorderRadius.topLeft"
        },
        "topRight": {
          "type": "number",
          "title": "BorderRadius.topRight"
        },
        "bottomLeft": {
          "type": "number",
          "title": "BorderRadius.bottomLeft"
        },
        "bottomRight": {
          "type": "number",
          "title": "BorderRadius.bottomRight"
        }
      },
      "required": [
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight"
      ],
      "additionalProperties": false,
      "title": "BorderRadius"
    },
    "BarHoverOptions": {
      "type": "object",
      "properties": {
        "hoverBorderRadius": {
          "anyOf": [
            {
              "type": "number",
              "title": "BarHoverOptions.hoverBorderRadius"
            },
            {
              "$ref": "#/definitions/BorderRadius",
              "title": "BarHoverOptions.hoverBorderRadius"
            }
          ],
          "title": "BarHoverOptions.hoverBorderRadius"
        }
      },
      "required": [
        "hoverBorderRadius"
      ],
      "additionalProperties": false,
      "title": "BarHoverOptions"
    },
    "DecimationOptions": {
      "anyOf": [
        {
          "$ref": "#/definitions/LttbDecimationOptions",
          "title": "DecimationOptions"
        },
        {
          "$ref": "#/definitions/MinMaxDecimationOptions",
          "title": "DecimationOptions"
        }
      ],
      "title": "DecimationOptions"
    },
    "FillerOptions": {
      "type": "object",
      "properties": {
        "drawTime": {
          "type": "string",
          "enum": [
            "beforeDatasetDraw",
            "beforeDatasetsDraw"
          ],
          "title": "FillerOptions.drawTime"
        },
        "propagate": {
          "type": "boolean",
          "title": "FillerOptions.propagate"
        }
      },
      "required": [
        "drawTime",
        "propagate"
      ],
      "additionalProperties": false,
      "title": "FillerOptions"
    },
    "FillTarget": {
      "anyOf": [
        {
          "type": "number",
          "title": "FillTarget"
        },
        {
          "type": "string",
          "title": "FillTarget"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "title": "FillTarget.value"
            }
          },
          "required": [
            "value"
          ],
          "additionalProperties": false,
          "title": "FillTarget"
        },
        {
          "type": "boolean",
          "title": "FillTarget"
        }
      ],
      "title": "FillTarget"
    },
    "ComplexFillTarget": {
      "type": "object",
      "properties": {
        "target": {
          "$ref": "#/definitions/FillTarget",
          "title": "ComplexFillTarget.target",
          "description": "The accepted values are the same as the filling mode values, so you may use absolute and relative dataset indexes and/or boundaries."
        },
        "above": {
          "$ref": "#/definitions/Color",
          "title": "ComplexFillTarget.above",
          "description": "If no color is set, the default color will be the background color of the chart."
        },
        "below": {
          "$ref": "#/definitions/Color",
          "title": "ComplexFillTarget.below",
          "description": "Same as the above."
        }
      },
      "required": [
        "target",
        "above",
        "below"
      ],
      "additionalProperties": false,
      "title": "ComplexFillTarget"
    },
    "FillerControllerDatasetOptions": {
      "type": "object",
      "properties": {
        "fill": {
          "anyOf": [
            {
              "$ref": "#/definitions/FillTarget",
              "title": "FillerControllerDatasetOptions.fill"
            },
            {
              "$ref": "#/definitions/ComplexFillTarget",
              "title": "FillerControllerDatasetOptions.fill"
            }
          ],
          "title": "FillerControllerDatasetOptions.fill",
          "description": "Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end"
        }
      },
      "required": [
        "fill"
      ],
      "additionalProperties": false,
      "title": "FillerControllerDatasetOptions"
    },
    "LegendItem": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "title": "LegendItem.text",
          "description": "Label that will be displayed"
        },
        "borderRadius": {
          "anyOf": [
            {
              "type": "number",
              "title": "LegendItem.borderRadius"
            },
            {
              "$ref": "#/definitions/BorderRadius",
              "title": "LegendItem.borderRadius"
            }
          ],
          "title": "LegendItem.borderRadius",
          "description": "Border radius of the legend box\n@since 3.1.0"
        },
        "datasetIndex": {
          "type": "number",
          "title": "LegendItem.datasetIndex",
          "description": "Index of the associated dataset"
        },
        "fillStyle": {
          "$ref": "#/definitions/Color",
          "title": "LegendItem.fillStyle",
          "description": "Fill style of the legend box"
        },
        "fontColor": {
          "$ref": "#/definitions/Color",
          "title": "LegendItem.fontColor",
          "description": "Font color for the text\nDefaults to LegendOptions.labels.color"
        },
        "hidden": {
          "type": "boolean",
          "title": "LegendItem.hidden",
          "description": "If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect"
        },
        "lineCap": {
          "$ref": "#/definitions/CanvasLineCap",
          "title": "LegendItem.lineCap",
          "description": "For box border.\n\n@see https ://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap"
        },
        "lineDash": {
          "type": "array",
          "items": {
            "type": "number",
            "title": "LegendItem.lineDash.[]"
          },
          "title": "LegendItem.lineDash",
          "description": "For box border.\n\n@see https ://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash"
        },
        "lineDashOffset": {
          "type": "number",
          "title": "LegendItem.lineDashOffset",
          "description": "For box border.\n\n@see https ://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset"
        },
        "lineJoin": {
          "$ref": "#/definitions/CanvasLineJoin",
          "title": "LegendItem.lineJoin",
          "description": "For box border.\n\n@see https ://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin"
        },
        "lineWidth": {
          "type": "number",
          "title": "LegendItem.lineWidth",
          "description": "Width of box border"
        },
        "strokeStyle": {
          "$ref": "#/definitions/Color",
          "title": "LegendItem.strokeStyle",
          "description": "Stroke style of the legend box"
        },
        "pointStyle": {
          "$ref": "#/definitions/PointStyle",
          "title": "LegendItem.pointStyle",
          "description": "Point style of the legend box (only used if usePointStyle is true)"
        },
        "rotation": {
          "type": "number",
          "title": "LegendItem.rotation",
          "description": "Rotation of the point in degrees (only used if usePointStyle is true)"
        },
        "textAlign": {
          "$ref": "#/definitions/TextAlign",
          "title": "LegendItem.textAlign",
          "description": "Text alignment"
        }
      },
      "required": [
        "text",
        "datasetIndex"
      ],
      "additionalProperties": false,
      "title": "LegendItem"
    },
    "TitleOptions": {
      "type": "object",
      "properties": {
        "align": {
          "$ref": "#/definitions/Align",
          "title": "TitleOptions.align",
          "description": "Alignment of the title.",
          "default": "'center'"
        },
        "display": {
          "type": "boolean",
          "title": "TitleOptions.display",
          "description": "Is the title shown?",
          "default": "false"
        },
        "position": {
          "type": "string",
          "enum": [
            "top",
            "left",
            "bottom",
            "right"
          ],
          "title": "TitleOptions.position",
          "description": "Position of title",
          "default": "'top'"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "title": "TitleOptions.color",
          "description": "Color of text"
        },
        "font": {
          "title": "TitleOptions.font"
        },
        "fullSize": {
          "type": "boolean",
          "title": "TitleOptions.fullSize",
          "description": "Marks that this box should take the full width/height of the canvas (moving other boxes). If set to `false`, places the box above/beside the\nchart area",
          "default": "true"
        },
        "padding": {
          "anyOf": [
            {
              "type": "number",
              "title": "TitleOptions.padding"
            },
            {
              "type": "object",
              "properties": {
                "top": {
                  "type": "number",
                  "title": "TitleOptions.padding.top"
                },
                "bottom": {
                  "type": "number",
                  "title": "TitleOptions.padding.bottom"
                }
              },
              "required": [
                "top",
                "bottom"
              ],
              "additionalProperties": false,
              "title": "TitleOptions.padding"
            }
          ],
          "title": "TitleOptions.padding",
          "description": "Adds padding above and below the title text if a single number is specified. It is also possible to change top and bottom padding separately."
        },
        "text": {
          "anyOf": [
            {
              "type": "string",
              "title": "TitleOptions.text"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "title": "TitleOptions.text.[]"
              },
              "title": "TitleOptions.text.[]"
            }
          ],
          "title": "TitleOptions.text",
          "description": "Title text to display. If specified as an array, text is rendered on multiple lines."
        }
      },
      "required": [
        "align",
        "display",
        "position",
        "color",
        "font",
        "fullSize",
        "padding",
        "text"
      ],
      "additionalProperties": false,
      "title": "TitleOptions"
    },
    "TooltipXAlignment": {
      "type": "string",
      "enum": [
        "left",
        "center",
        "right"
      ],
      "title": "TooltipXAlignment"
    },
    "TooltipYAlignment": {
      "type": "string",
      "enum": [
        "top",
        "center",
        "bottom"
      ],
      "title": "TooltipYAlignment"
    },
    "TooltipLabelStyle": {
      "type": "object",
      "properties": {
        "borderColor": {
          "$ref": "#/definitions/Color",
          "title": "TooltipLabelStyle.borderColor"
        },
        "backgroundColor": {
          "$ref": "#/definitions/Color",
          "title": "TooltipLabelStyle.backgroundColor"
        },
        "borderWidth": {
          "type": "number",
          "title": "TooltipLabelStyle.borderWidth",
          "description": "Width of border line\n@since 3.1.0"
        },
        "borderDash": {
          "type": "array",
          "items": [
            {
              "type": "number",
              "title": "TooltipLabelStyle.borderDash.0"
            },
            {
              "type": "number",
              "title": "TooltipLabelStyle.borderDash.1"
            }
          ],
          "additionalItems": false,
          "minItems": 2,
          "title": "TooltipLabelStyle.borderDash",
          "description": "Border dash\n@since 3.1.0"
        },
        "borderDashOffset": {
          "type": "number",
          "title": "TooltipLabelStyle.borderDashOffset",
          "description": "Border dash offset\n@since 3.1.0"
        },
        "borderRadius": {
          "anyOf": [
            {
              "type": "number",
              "title": "TooltipLabelStyle.borderRadius"
            },
            {
              "$ref": "#/definitions/BorderRadius",
              "title": "TooltipLabelStyle.borderRadius"
            }
          ],
          "title": "TooltipLabelStyle.borderRadius",
          "description": "borderRadius\n@since 3.1.0"
        }
      },
      "required": [
        "borderColor",
        "backgroundColor"
      ],
      "additionalProperties": false,
      "title": "TooltipLabelStyle"
    },
    "TooltipPosition": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "TooltipPosition.x"
        },
        "y": {
          "type": "number",
          "title": "TooltipPosition.y"
        },
        "xAlign": {
          "$ref": "#/definitions/TooltipXAlignment",
          "title": "TooltipPosition.xAlign"
        },
        "yAlign": {
          "$ref": "#/definitions/TooltipYAlignment",
          "title": "TooltipPosition.yAlign"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "TooltipPosition"
    },
    "TooltipPositionerMap": {
      "type": "object",
      "properties": {
        "average": {
          "title": "TooltipPositionerMap.average"
        },
        "nearest": {
          "title": "TooltipPositionerMap.nearest"
        }
      },
      "required": [
        "average",
        "nearest"
      ],
      "additionalProperties": false,
      "title": "TooltipPositionerMap"
    },
    "TooltipPositioner": {
      "title": "TooltipPositioner"
    },
    "Tooltip": {
      "type": "object",
      "properties": {
        "positioners": {
          "$ref": "#/definitions/TooltipPositionerMap",
          "title": "Tooltip.positioners"
        }
      },
      "required": [
        "positioners"
      ],
      "additionalProperties": false,
      "title": "Tooltip"
    },
    "GridLineOptions": {
      "type": "object",
      "properties": {
        "display": {
          "type": "boolean",
          "title": "GridLineOptions.display",
          "default": "true"
        },
        "borderColor": {
          "$ref": "#/definitions/Color",
          "title": "GridLineOptions.borderColor"
        },
        "borderWidth": {
          "type": "number",
          "title": "GridLineOptions.borderWidth"
        },
        "circular": {
          "type": "boolean",
          "title": "GridLineOptions.circular",
          "default": "false"
        },
        "color": {
          "title": "GridLineOptions.color",
          "default": "'rgba(0, 0, 0, 0.1)'"
        },
        "borderDash": {
          "type": "array",
          "items": {
            "type": "number",
            "title": "GridLineOptions.borderDash.[]"
          },
          "title": "GridLineOptions.borderDash",
          "default": "[]"
        },
        "borderDashOffset": {
          "title": "GridLineOptions.borderDashOffset",
          "default": "0"
        },
        "lineWidth": {
          "title": "GridLineOptions.lineWidth",
          "default": "1"
        },
        "drawBorder": {
          "type": "boolean",
          "title": "GridLineOptions.drawBorder",
          "default": "true"
        },
        "drawOnChartArea": {
          "type": "boolean",
          "title": "GridLineOptions.drawOnChartArea",
          "default": "true"
        },
        "drawTicks": {
          "type": "boolean",
          "title": "GridLineOptions.drawTicks",
          "default": "true"
        },
        "tickBorderDash": {
          "type": "array",
          "items": {
            "type": "number",
            "title": "GridLineOptions.tickBorderDash.[]"
          },
          "title": "GridLineOptions.tickBorderDash",
          "default": "[]"
        },
        "tickBorderDashOffset": {
          "title": "GridLineOptions.tickBorderDashOffset",
          "default": "0"
        },
        "tickColor": {
          "title": "GridLineOptions.tickColor",
          "default": "'rgba(0, 0, 0, 0.1)'"
        },
        "tickLength": {
          "type": "number",
          "title": "GridLineOptions.tickLength",
          "default": "10"
        },
        "tickWidth": {
          "type": "number",
          "title": "GridLineOptions.tickWidth",
          "default": "1"
        },
        "offset": {
          "type": "boolean",
          "title": "GridLineOptions.offset",
          "default": "false"
        },
        "z": {
          "type": "number",
          "title": "GridLineOptions.z",
          "default": "0"
        }
      },
      "required": [
        "display",
        "borderColor",
        "borderWidth",
        "circular",
        "color",
        "borderDash",
        "borderDashOffset",
        "lineWidth",
        "drawBorder",
        "drawOnChartArea",
        "drawTicks",
        "tickBorderDash",
        "tickBorderDashOffset",
        "tickColor",
        "tickLength",
        "tickWidth",
        "offset",
        "z"
      ],
      "additionalProperties": false,
      "title": "GridLineOptions"
    },
    "TickOptions": {
      "type": "object",
      "properties": {
        "backdropColor": {
          "title": "TickOptions.backdropColor",
          "description": "Color of label backdrops.",
          "default": "'rgba(255, 255, 255, 0.75)'"
        },
        "backdropPadding": {
          "anyOf": [
            {
              "type": "number",
              "title": "TickOptions.backdropPadding"
            },
            {
              "$ref": "#/definitions/ChartArea",
              "title": "TickOptions.backdropPadding"
            }
          ],
          "title": "TickOptions.backdropPadding",
          "description": "Padding of tick backdrop.",
          "default": "2"
        },
        "callback": {
          "title": "TickOptions.callback",
          "description": "Returns the string representation of the tick value as it should be displayed on the chart. See callback."
        },
        "display": {
          "type": "boolean",
          "title": "TickOptions.display",
          "description": "If true, show tick labels.",
          "default": "true"
        },
        "color": {
          "title": "TickOptions.color",
          "description": "Color of tick"
        },
        "font": {
          "title": "TickOptions.font",
          "description": "see Fonts"
        },
        "padding": {
          "type": "number",
          "title": "TickOptions.padding",
          "description": "Sets the offset of the tick labels from the axis"
        },
        "showLabelBackdrop": {
          "title": "TickOptions.showLabelBackdrop",
          "description": "If true, draw a background behind the tick labels.",
          "default": "false"
        },
        "textStrokeColor": {
          "title": "TickOptions.textStrokeColor",
          "description": "The color of the stroke around the text.",
          "default": "undefined"
        },
        "textStrokeWidth": {
          "title": "TickOptions.textStrokeWidth",
          "description": "Stroke width around the text.",
          "default": "0"
        },
        "z": {
          "type": "number",
          "title": "TickOptions.z",
          "description": "z-index of tick layer. Useful when ticks are drawn on chart area. Values <= 0 are drawn under datasets, > 0 on top.",
          "default": "0"
        },
        "major": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "TickOptions.major.enabled",
              "description": "If true, major ticks are generated. A major tick will affect autoskipping and major will be defined on ticks in the scriptable options context.",
              "default": "false"
            }
          },
          "required": [
            "enabled"
          ],
          "additionalProperties": false,
          "title": "TickOptions.major"
        }
      },
      "required": [
        "backdropColor",
        "backdropPadding",
        "callback",
        "display",
        "color",
        "font",
        "padding",
        "showLabelBackdrop",
        "textStrokeColor",
        "textStrokeWidth",
        "z",
        "major"
      ],
      "additionalProperties": false,
      "title": "TickOptions"
    },
    "CartesianTickOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/TickOptions"
        },
        {
          "type": "object",
          "properties": {
            "sampleSize": {
              "type": "number",
              "title": "sampleSize",
              "description": "The number of ticks to examine when deciding how many labels will fit. Setting a smaller value will be faster, but may be less accurate when there is large variability in label length.",
              "default": "ticks.length"
            },
            "align": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Align",
                  "title": "align"
                },
                {
                  "type": "string",
                  "const": "inner",
                  "title": "align"
                }
              ],
              "title": "align",
              "description": "The label alignment",
              "default": "'center'"
            },
            "autoSkip": {
              "type": "boolean",
              "title": "autoSkip",
              "description": "If true, automatically calculates how many labels can be shown and hides labels accordingly. Labels will be rotated up to maxRotation before skipping any. Turn autoSkip off to show all labels no matter what.",
              "default": "true"
            },
            "autoSkipPadding": {
              "type": "number",
              "title": "autoSkipPadding",
              "description": "Padding between the ticks on the horizontal axis when autoSkip is enabled.",
              "default": "0"
            },
            "crossAlign": {
              "type": "string",
              "enum": [
                "near",
                "center",
                "far"
              ],
              "title": "crossAlign",
              "description": "How is the label positioned perpendicular to the axis direction.\nThis only applies when the rotation is 0 and the axis position is one of \"top\", \"left\", \"right\", or \"bottom\"",
              "default": "'near'"
            },
            "includeBounds": {
              "type": "boolean",
              "title": "includeBounds",
              "description": "Should the defined `min` and `max` values be presented as ticks even if they are not \"nice\".",
              "default": ": true"
            },
            "labelOffset": {
              "type": "number",
              "title": "labelOffset",
              "description": "Distance in pixels to offset the label from the centre point of the tick (in the x direction for the x axis, and the y direction for the y axis). Note: this can cause labels at the edges to be cropped by the edge of the canvas",
              "default": "0"
            },
            "minRotation": {
              "type": "number",
              "title": "minRotation",
              "description": "Minimum rotation for tick labels. Note: Only applicable to horizontal scales.",
              "default": "0"
            },
            "maxRotation": {
              "type": "number",
              "title": "maxRotation",
              "description": "Maximum rotation for tick labels when rotating to condense labels. Note: Rotation doesn't occur until necessary. Note: Only applicable to horizontal scales.",
              "default": "50"
            },
            "mirror": {
              "type": "boolean",
              "title": "mirror",
              "description": "Flips tick labels around axis, displaying the labels inside the chart instead of outside. Note: Only applicable to vertical scales.",
              "default": "false"
            },
            "padding": {
              "type": "number",
              "title": "padding",
              "description": "Padding between the tick label and the axis. When set on a vertical axis, this applies in the horizontal (X) direction. When set on a horizontal axis, this applies in the vertical (Y) direction.",
              "default": "0"
            },
            "maxTicksLimit": {
              "type": "number",
              "title": "maxTicksLimit",
              "description": "Maximum number of ticks and gridlines to show.",
              "default": "11"
            }
          },
          "required": [
            "sampleSize",
            "align",
            "autoSkip",
            "autoSkipPadding",
            "crossAlign",
            "includeBounds",
            "labelOffset",
            "minRotation",
            "maxRotation",
            "mirror",
            "padding",
            "maxTicksLimit"
          ],
          "additionalProperties": false
        }
      ],
      "title": "CartesianTickOptions"
    },
    "ScriptableCartesianScaleContext": {
      "type": "object",
      "properties": {
        "scale": {
          "title": "ScriptableCartesianScaleContext.scale"
        },
        "type": {
          "type": "string",
          "title": "ScriptableCartesianScaleContext.type"
        }
      },
      "required": [
        "scale",
        "type"
      ],
      "additionalProperties": false,
      "title": "ScriptableCartesianScaleContext"
    },
    "ScriptableChartContext": {
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "#/definitions/Chart",
          "title": "ScriptableChartContext.chart"
        },
        "type": {
          "type": "string",
          "title": "ScriptableChartContext.type"
        }
      },
      "required": [
        "chart",
        "type"
      ],
      "additionalProperties": false,
      "title": "ScriptableChartContext"
    },
    "CartesianScaleOptions": {
      "type": "object",
      "properties": {
        "bounds": {
          "type": "string",
          "enum": [
            "ticks",
            "data"
          ],
          "title": "CartesianScaleOptions.bounds",
          "description": "Scale boundary strategy (bypassed by min/max time options)\n- `data`: make sure data are fully visible, ticks outside are removed\n- `ticks`: make sure ticks are fully visible, data outside are truncated\n@since 2.7.0",
          "default": "'ticks'"
        },
        "position": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "left",
                "top",
                "right",
                "bottom",
                "center"
              ],
              "title": "CartesianScaleOptions.position"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "number"
              },
              "title": "CartesianScaleOptions.position"
            }
          ],
          "title": "CartesianScaleOptions.position",
          "description": "Position of the axis."
        },
        "stack": {
          "type": "string",
          "title": "CartesianScaleOptions.stack",
          "description": "Stack group. Axes at the same `position` with same `stack` are stacked."
        },
        "stackWeight": {
          "type": "number",
          "title": "CartesianScaleOptions.stackWeight",
          "description": "Weight of the scale in stack group. Used to determine the amount of allocated space for the scale within the group.",
          "default": "1"
        },
        "axis": {
          "type": "string",
          "enum": [
            "x",
            "y"
          ],
          "title": "CartesianScaleOptions.axis",
          "description": "Which type of axis this is. Possible values are: 'x', 'y'. If not set, this is inferred from the first character of the ID which should be 'x' or 'y'."
        },
        "min": {
          "type": "number",
          "title": "CartesianScaleOptions.min",
          "description": "User defined minimum value for the scale, overrides minimum value from data."
        },
        "max": {
          "type": "number",
          "title": "CartesianScaleOptions.max",
          "description": "User defined maximum value for the scale, overrides maximum value from data."
        },
        "offset": {
          "type": "boolean",
          "title": "CartesianScaleOptions.offset",
          "description": "If true, extra space is added to the both edges and the axis is scaled to fit into the chart area. This is set to true for a bar chart by default.",
          "default": "false"
        },
        "grid": {
          "$ref": "#/definitions/GridLineOptions",
          "title": "CartesianScaleOptions.grid"
        },
        "title": {
          "type": "object",
          "properties": {
            "display": {
              "type": "boolean",
              "title": "CartesianScaleOptions.title.display",
              "description": "If true, displays the axis title."
            },
            "align": {
              "$ref": "#/definitions/Align",
              "title": "CartesianScaleOptions.title.align",
              "description": "Alignment of the axis title."
            },
            "text": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "CartesianScaleOptions.title.text"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "title": "CartesianScaleOptions.title.text.[]"
                  },
                  "title": "CartesianScaleOptions.title.text.[]"
                }
              ],
              "title": "CartesianScaleOptions.title.text",
              "description": "The text for the title, e.g. \"# of People\" or \"Response Choices\"."
            },
            "color": {
              "$ref": "#/definitions/Color",
              "title": "CartesianScaleOptions.title.color",
              "description": "Color of the axis label."
            },
            "font": {
              "title": "CartesianScaleOptions.title.font",
              "description": "Information about the axis title font."
            },
            "padding": {
              "anyOf": [
                {
                  "type": "number",
                  "title": "CartesianScaleOptions.title.padding"
                },
                {
                  "type": "object",
                  "properties": {
                    "top": {
                      "type": "number",
                      "title": "CartesianScaleOptions.title.padding.top",
                      "description": "Padding on the (relative) top side of this axis label."
                    },
                    "bottom": {
                      "type": "number",
                      "title": "CartesianScaleOptions.title.padding.bottom",
                      "description": "Padding on the (relative) bottom side of this axis label."
                    },
                    "y": {
                      "type": "number",
                      "title": "CartesianScaleOptions.title.padding.y",
                      "description": "This is a shorthand for defining top/bottom to the same values."
                    }
                  },
                  "required": [
                    "top",
                    "bottom",
                    "y"
                  ],
                  "additionalProperties": false,
                  "title": "CartesianScaleOptions.title.padding"
                }
              ],
              "title": "CartesianScaleOptions.title.padding",
              "description": "Padding to apply around scale labels."
            }
          },
          "required": [
            "display",
            "align",
            "text",
            "color",
            "font",
            "padding"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleOptions.title",
          "description": "Options for the scale title."
        },
        "stacked": {
          "anyOf": [
            {
              "type": "boolean",
              "title": "CartesianScaleOptions.stacked"
            },
            {
              "type": "string",
              "const": "single",
              "title": "CartesianScaleOptions.stacked"
            }
          ],
          "title": "CartesianScaleOptions.stacked",
          "description": "If true, data will be comprised between datasets of data",
          "default": "false"
        },
        "ticks": {
          "$ref": "#/definitions/CartesianTickOptions",
          "title": "CartesianScaleOptions.ticks"
        }
      },
      "required": [
        "bounds",
        "position",
        "axis",
        "min",
        "max",
        "offset",
        "grid",
        "title",
        "ticks"
      ],
      "additionalProperties": false,
      "title": "CartesianScaleOptions"
    },
    "CategoryScaleOptions": {
      "type": "object",
      "properties": {
        "min": {
          "title": "min",
          "type": [
            "string",
            "number"
          ]
        },
        "max": {
          "title": "max",
          "type": [
            "string",
            "number"
          ]
        },
        "labels": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "title": "labels.[]"
              },
              "title": "labels.[]"
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string",
                  "title": "labels.[].[]"
                },
                "title": "labels.[].[]"
              },
              "title": "labels.[]"
            }
          ],
          "title": "labels"
        }
      },
      "required": [
        "min",
        "max",
        "labels"
      ],
      "additionalProperties": false,
      "title": "CategoryScaleOptions"
    },
    "LinearScaleOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/CartesianScaleOptions"
        },
        {
          "type": "object",
          "properties": {
            "beginAtZero": {
              "type": "boolean",
              "title": "beginAtZero",
              "description": "if true, scale will include 0 if it is not already included.",
              "default": "true"
            },
            "suggestedMin": {
              "type": "number",
              "title": "suggestedMin",
              "description": "Adjustment used when calculating the maximum data value."
            },
            "suggestedMax": {
              "type": "number",
              "title": "suggestedMax",
              "description": "Adjustment used when calculating the minimum data value."
            },
            "grace": {
              "title": "grace",
              "description": "Percentage (string ending with %) or amount (number) for added room in the scale range above and below data.",
              "type": [
                "string",
                "number"
              ]
            },
            "ticks": {
              "type": "object",
              "properties": {
                "format": {
                  "title": "ticks.format",
                  "description": "The Intl.NumberFormat options used by the default label formatter"
                },
                "precision": {
                  "type": "number",
                  "title": "ticks.precision",
                  "description": "if defined and stepSize is not specified, the step size will be rounded to this many decimal places."
                },
                "stepSize": {
                  "type": "number",
                  "title": "ticks.stepSize",
                  "description": "User defined fixed step size for the scale"
                },
                "count": {
                  "type": "number",
                  "title": "ticks.count",
                  "description": "User defined count of ticks"
                }
              },
              "required": [
                "format",
                "precision",
                "stepSize",
                "count"
              ],
              "additionalProperties": false,
              "title": "ticks"
            }
          },
          "required": [
            "beginAtZero",
            "ticks"
          ],
          "additionalProperties": false
        }
      ],
      "title": "LinearScaleOptions"
    },
    "LogarithmicScaleOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/CartesianScaleOptions"
        },
        {
          "type": "object",
          "properties": {
            "suggestedMin": {
              "type": "number",
              "title": "suggestedMin",
              "description": "Adjustment used when calculating the maximum data value."
            },
            "suggestedMax": {
              "type": "number",
              "title": "suggestedMax",
              "description": "Adjustment used when calculating the minimum data value."
            },
            "ticks": {
              "type": "object",
              "properties": {
                "format": {
                  "title": "ticks.format",
                  "description": "The Intl.NumberFormat options used by the default label formatter"
                }
              },
              "required": [
                "format"
              ],
              "additionalProperties": false,
              "title": "ticks"
            }
          },
          "required": [
            "ticks"
          ],
          "additionalProperties": false
        }
      ],
      "title": "LogarithmicScaleOptions"
    },
    "TimeScaleOptions": {
      "type": "object",
      "properties": {
        "min": {
          "title": "min",
          "type": [
            "string",
            "number"
          ]
        },
        "max": {
          "title": "max",
          "type": [
            "string",
            "number"
          ]
        },
        "suggestedMin": {
          "title": "suggestedMin",
          "type": [
            "string",
            "number"
          ]
        },
        "suggestedMax": {
          "title": "suggestedMax",
          "type": [
            "string",
            "number"
          ]
        },
        "bounds": {
          "type": "string",
          "enum": [
            "ticks",
            "data"
          ],
          "title": "bounds",
          "description": "Scale boundary strategy (bypassed by min/max time options)\n- `data`: make sure data are fully visible, ticks outside are removed\n- `ticks`: make sure ticks are fully visible, data outside are truncated\n@since 2.7.0",
          "default": "'data'"
        },
        "offsetAfterAutoskip": {
          "type": "boolean",
          "title": "offsetAfterAutoskip",
          "description": "If true, bar chart offsets are computed with skipped tick sizes\n@since 3.8.0",
          "default": "false"
        },
        "adapters": {
          "type": "object",
          "properties": {
            "date": {
              "title": "adapters.date"
            }
          },
          "required": [
            "date"
          ],
          "additionalProperties": false,
          "title": "adapters",
          "description": "options for creating a new adapter instance"
        },
        "time": {
          "type": "object",
          "properties": {
            "parser": {
              "type": "string",
              "title": "time.parser",
              "description": "Custom parser for dates."
            },
            "round": {
              "anyOf": [
                {
                  "type": "boolean",
                  "const": false,
                  "title": "time.round"
                },
                {
                  "$ref": "#/definitions/TimeUnit",
                  "title": "time.round"
                }
              ],
              "title": "time.round",
              "description": "If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units."
            },
            "isoWeekday": {
              "title": "time.isoWeekday",
              "description": "If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday.\nIf `number`, the index of the first day of the week (0 - Sunday, 6 - Saturday).",
              "default": "false",
              "type": [
                "boolean",
                "number"
              ]
            },
            "displayFormats": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "time.displayFormats",
              "description": "Sets how different time units are displayed."
            },
            "tooltipFormat": {
              "type": "string",
              "title": "time.tooltipFormat",
              "description": "The format string to use for the tooltip."
            },
            "unit": {
              "anyOf": [
                {
                  "type": "boolean",
                  "const": false,
                  "title": "time.unit"
                },
                {
                  "$ref": "#/definitions/TimeUnit",
                  "title": "time.unit"
                }
              ],
              "title": "time.unit",
              "description": "If defined, will force the unit to be a certain type. See Time Units section below for details.",
              "default": "false"
            },
            "stepSize": {
              "type": "number",
              "title": "time.stepSize",
              "description": "The number of units between grid lines.",
              "default": "1"
            },
            "minUnit": {
              "$ref": "#/definitions/TimeUnit",
              "title": "time.minUnit",
              "description": "The minimum display format to be used for a time unit.",
              "default": "'millisecond'"
            }
          },
          "required": [
            "parser",
            "round",
            "isoWeekday",
            "displayFormats",
            "tooltipFormat",
            "unit",
            "stepSize",
            "minUnit"
          ],
          "additionalProperties": false,
          "title": "time"
        },
        "ticks": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "enum": [
                "labels",
                "auto",
                "data"
              ],
              "title": "ticks.source",
              "description": "Ticks generation input values:\n- 'auto': generates \"optimal\" ticks based on scale size and time options.\n- 'data': generates ticks from data (including labels from data {t|x|y} objects).\n- 'labels': generates ticks from user given `data.labels` values ONLY.\n@since 2.7.0\n\n@see https ://github.com/chartjs/Chart.js/pull/4507",
              "default": "'auto'"
            }
          },
          "required": [
            "source"
          ],
          "additionalProperties": false,
          "title": "ticks"
        }
      },
      "required": [
        "min",
        "max",
        "suggestedMin",
        "suggestedMax",
        "bounds",
        "offsetAfterAutoskip",
        "adapters",
        "time",
        "ticks"
      ],
      "additionalProperties": false,
      "title": "TimeScaleOptions"
    },
    "RadialTickOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/TickOptions"
        },
        {
          "type": "object",
          "properties": {
            "format": {
              "title": "format",
              "description": "The Intl.NumberFormat options used by the default label formatter"
            },
            "maxTicksLimit": {
              "type": "number",
              "title": "maxTicksLimit",
              "description": "Maximum number of ticks and gridlines to show.",
              "default": "11"
            },
            "precision": {
              "type": "number",
              "title": "precision",
              "description": "if defined and stepSize is not specified, the step size will be rounded to this many decimal places."
            },
            "stepSize": {
              "type": "number",
              "title": "stepSize",
              "description": "User defined fixed step size for the scale."
            },
            "count": {
              "type": "number",
              "title": "count",
              "description": "User defined number of ticks"
            }
          },
          "required": [
            "format",
            "maxTicksLimit",
            "precision",
            "stepSize",
            "count"
          ],
          "additionalProperties": false
        }
      ],
      "title": "RadialTickOptions"
    },
    "RadialLinearScaleOptions": {
      "allOf": [
        {
          "$ref": "#/definitions/CoreScaleOptions"
        },
        {
          "type": "object",
          "properties": {
            "animate": {
              "type": "boolean",
              "title": "animate"
            },
            "startAngle": {
              "type": "number",
              "title": "startAngle"
            },
            "angleLines": {
              "type": "object",
              "properties": {
                "display": {
                  "type": "boolean",
                  "title": "angleLines.display",
                  "description": "if true, angle lines are shown.",
                  "default": "true"
                },
                "color": {
                  "title": "angleLines.color",
                  "description": "Color of angled lines.",
                  "default": "'rgba(0, 0, 0, 0.1)'"
                },
                "lineWidth": {
                  "title": "angleLines.lineWidth",
                  "description": "Width of angled lines.",
                  "default": "1"
                },
                "borderDash": {
                  "title": "angleLines.borderDash",
                  "description": "Length and spacing of dashes on angled lines. See MDN.",
                  "default": "[]"
                },
                "borderDashOffset": {
                  "title": "angleLines.borderDashOffset",
                  "description": "Offset for line dashes. See MDN.",
                  "default": "0"
                }
              },
              "required": [
                "display",
                "color",
                "lineWidth",
                "borderDash",
                "borderDashOffset"
              ],
              "additionalProperties": false,
              "title": "angleLines"
            },
            "beginAtZero": {
              "type": "boolean",
              "title": "beginAtZero",
              "description": "if true, scale will include 0 if it is not already included.",
              "default": "false"
            },
            "grid": {
              "$ref": "#/definitions/GridLineOptions",
              "title": "grid"
            },
            "min": {
              "type": "number",
              "title": "min",
              "description": "User defined minimum number for the scale, overrides minimum value from data."
            },
            "max": {
              "type": "number",
              "title": "max",
              "description": "User defined maximum number for the scale, overrides maximum value from data."
            },
            "pointLabels": {
              "type": "object",
              "properties": {
                "backdropColor": {
                  "title": "pointLabels.backdropColor",
                  "description": "Background color of the point label.",
                  "default": "undefined"
                },
                "backdropPadding": {
                  "title": "pointLabels.backdropPadding",
                  "description": "Padding of label backdrop.",
                  "default": "2"
                },
                "borderRadius": {
                  "title": "pointLabels.borderRadius",
                  "description": "Border radius\n@since 3.8.0",
                  "default": "0"
                },
                "display": {
                  "type": "boolean",
                  "title": "pointLabels.display",
                  "description": "if true, point labels are shown.",
                  "default": "true"
                },
                "color": {
                  "title": "pointLabels.color",
                  "description": "Color of label"
                },
                "font": {
                  "title": "pointLabels.font"
                },
                "callback": {
                  "title": "pointLabels.callback",
                  "description": "Callback function to transform data labels to point labels. The default implementation simply returns the current string."
                },
                "centerPointLabels": {
                  "type": "boolean",
                  "title": "pointLabels.centerPointLabels",
                  "description": "if true, point labels are centered.",
                  "default": "false"
                }
              },
              "required": [
                "backdropColor",
                "backdropPadding",
                "borderRadius",
                "display",
                "color",
                "font",
                "callback",
                "centerPointLabels"
              ],
              "additionalProperties": false,
              "title": "pointLabels"
            },
            "suggestedMax": {
              "type": "number",
              "title": "suggestedMax",
              "description": "Adjustment used when calculating the maximum data value."
            },
            "suggestedMin": {
              "type": "number",
              "title": "suggestedMin",
              "description": "Adjustment used when calculating the minimum data value."
            },
            "ticks": {
              "$ref": "#/definitions/RadialTickOptions",
              "title": "ticks"
            }
          },
          "required": [
            "animate",
            "startAngle",
            "angleLines",
            "beginAtZero",
            "grid",
            "min",
            "max",
            "pointLabels",
            "suggestedMax",
            "suggestedMin",
            "ticks"
          ],
          "additionalProperties": false
        }
      ],
      "title": "RadialLinearScaleOptions"
    },
    "CartesianScaleTypeRegistry": {
      "type": "object",
      "properties": {
        "linear": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/LinearScaleOptions",
              "title": "CartesianScaleTypeRegistry.linear.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleTypeRegistry.linear"
        },
        "logarithmic": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/LogarithmicScaleOptions",
              "title": "CartesianScaleTypeRegistry.logarithmic.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleTypeRegistry.logarithmic"
        },
        "category": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/CategoryScaleOptions",
              "title": "CartesianScaleTypeRegistry.category.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleTypeRegistry.category"
        },
        "time": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/TimeScaleOptions",
              "title": "CartesianScaleTypeRegistry.time.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleTypeRegistry.time"
        },
        "timeseries": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/TimeScaleOptions",
              "title": "CartesianScaleTypeRegistry.timeseries.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "CartesianScaleTypeRegistry.timeseries"
        }
      },
      "required": [
        "linear",
        "logarithmic",
        "category",
        "time",
        "timeseries"
      ],
      "additionalProperties": false,
      "title": "CartesianScaleTypeRegistry"
    },
    "RadialScaleTypeRegistry": {
      "type": "object",
      "properties": {
        "radialLinear": {
          "type": "object",
          "properties": {
            "options": {
              "$ref": "#/definitions/RadialLinearScaleOptions",
              "title": "RadialScaleTypeRegistry.radialLinear.options"
            }
          },
          "required": [
            "options"
          ],
          "additionalProperties": false,
          "title": "RadialScaleTypeRegistry.radialLinear"
        }
      },
      "required": [
        "radialLinear"
      ],
      "additionalProperties": false,
      "title": "RadialScaleTypeRegistry"
    },
    "ScaleTypeRegistry": {
      "type": "object",
      "additionalProperties": false,
      "title": "ScaleTypeRegistry"
    },
    "ScaleType": {
      "title": "ScaleType"
    },
    "ChartTypeRegistry": {
      "type": "object",
      "properties": {
        "bar": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/BarControllerChartOptions",
              "title": "ChartTypeRegistry.bar.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/BarControllerDatasetOptions",
              "title": "ChartTypeRegistry.bar.datasetOptions"
            },
            "defaultDataPoint": {
              "type": "number",
              "title": "ChartTypeRegistry.bar.defaultDataPoint"
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.bar.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/BarParsedData",
              "title": "ChartTypeRegistry.bar.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.bar.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.bar"
        },
        "line": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/LineControllerChartOptions",
              "title": "ChartTypeRegistry.line.chartOptions"
            },
            "datasetOptions": {
              "allOf": [
                {
                  "$ref": "#/definitions/LineControllerDatasetOptions"
                },
                {
                  "$ref": "#/definitions/FillerControllerDatasetOptions"
                }
              ],
              "title": "ChartTypeRegistry.line.datasetOptions"
            },
            "defaultDataPoint": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ScatterDataPoint",
                  "title": "ChartTypeRegistry.line.defaultDataPoint"
                },
                {
                  "type": "number",
                  "title": "ChartTypeRegistry.line.defaultDataPoint"
                },
                {
                  "type": "null",
                  "title": "ChartTypeRegistry.line.defaultDataPoint"
                }
              ],
              "title": "ChartTypeRegistry.line.defaultDataPoint"
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.line.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/CartesianParsedData",
              "title": "ChartTypeRegistry.line.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.line.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.line"
        },
        "scatter": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/ScatterControllerChartOptions",
              "title": "ChartTypeRegistry.scatter.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/ScatterControllerDatasetOptions",
              "title": "ChartTypeRegistry.scatter.datasetOptions"
            },
            "defaultDataPoint": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ScatterDataPoint",
                  "title": "ChartTypeRegistry.scatter.defaultDataPoint"
                },
                {
                  "type": "number",
                  "title": "ChartTypeRegistry.scatter.defaultDataPoint"
                },
                {
                  "type": "null",
                  "title": "ChartTypeRegistry.scatter.defaultDataPoint"
                }
              ],
              "title": "ChartTypeRegistry.scatter.defaultDataPoint"
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.scatter.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/CartesianParsedData",
              "title": "ChartTypeRegistry.scatter.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.scatter.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.scatter"
        },
        "bubble": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "title": "ChartTypeRegistry.bubble.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/BubbleControllerDatasetOptions",
              "title": "ChartTypeRegistry.bubble.datasetOptions"
            },
            "defaultDataPoint": {
              "$ref": "#/definitions/BubbleDataPoint",
              "title": "ChartTypeRegistry.bubble.defaultDataPoint"
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.bubble.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/BubbleParsedData",
              "title": "ChartTypeRegistry.bubble.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.bubble.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.bubble"
        },
        "pie": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/PieControllerChartOptions",
              "title": "ChartTypeRegistry.pie.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/PieControllerDatasetOptions",
              "title": "ChartTypeRegistry.pie.datasetOptions"
            },
            "defaultDataPoint": {
              "$ref": "#/definitions/PieDataPoint",
              "title": "ChartTypeRegistry.pie.defaultDataPoint"
            },
            "metaExtensions": {
              "$ref": "#/definitions/PieMetaExtensions",
              "title": "ChartTypeRegistry.pie.metaExtensions"
            },
            "parsedDataType": {
              "type": "number",
              "title": "ChartTypeRegistry.pie.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.pie.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.pie"
        },
        "doughnut": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/DoughnutControllerChartOptions",
              "title": "ChartTypeRegistry.doughnut.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/DoughnutControllerDatasetOptions",
              "title": "ChartTypeRegistry.doughnut.datasetOptions"
            },
            "defaultDataPoint": {
              "$ref": "#/definitions/DoughnutDataPoint",
              "title": "ChartTypeRegistry.doughnut.defaultDataPoint"
            },
            "metaExtensions": {
              "$ref": "#/definitions/DoughnutMetaExtensions",
              "title": "ChartTypeRegistry.doughnut.metaExtensions"
            },
            "parsedDataType": {
              "type": "number",
              "title": "ChartTypeRegistry.doughnut.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.doughnut.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.doughnut"
        },
        "polarArea": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/PolarAreaControllerChartOptions",
              "title": "ChartTypeRegistry.polarArea.chartOptions"
            },
            "datasetOptions": {
              "$ref": "#/definitions/PolarAreaControllerDatasetOptions",
              "title": "ChartTypeRegistry.polarArea.datasetOptions"
            },
            "defaultDataPoint": {
              "type": "number",
              "title": "ChartTypeRegistry.polarArea.defaultDataPoint"
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.polarArea.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/RadialParsedData",
              "title": "ChartTypeRegistry.polarArea.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.polarArea.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.polarArea"
        },
        "radar": {
          "type": "object",
          "properties": {
            "chartOptions": {
              "$ref": "#/definitions/RadarControllerChartOptions",
              "title": "ChartTypeRegistry.radar.chartOptions"
            },
            "datasetOptions": {
              "allOf": [
                {
                  "$ref": "#/definitions/RadarControllerDatasetOptions"
                },
                {
                  "$ref": "#/definitions/FillerControllerDatasetOptions"
                }
              ],
              "title": "ChartTypeRegistry.radar.datasetOptions"
            },
            "defaultDataPoint": {
              "title": "ChartTypeRegistry.radar.defaultDataPoint",
              "type": [
                "number",
                "null"
              ]
            },
            "metaExtensions": {
              "type": "object",
              "additionalProperties": false,
              "title": "ChartTypeRegistry.radar.metaExtensions"
            },
            "parsedDataType": {
              "$ref": "#/definitions/RadialParsedData",
              "title": "ChartTypeRegistry.radar.parsedDataType"
            },
            "scales": {
              "title": "ChartTypeRegistry.radar.scales"
            }
          },
          "required": [
            "chartOptions",
            "datasetOptions",
            "defaultDataPoint",
            "metaExtensions",
            "parsedDataType",
            "scales"
          ],
          "additionalProperties": false,
          "title": "ChartTypeRegistry.radar"
        }
      },
      "required": [
        "bar",
        "line",
        "scatter",
        "bubble",
        "pie",
        "doughnut",
        "polarArea",
        "radar"
      ],
      "additionalProperties": false,
      "title": "ChartTypeRegistry"
    },
    "ChartType": {
      "title": "ChartType"
    },
    "LttbDecimationOptions": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "const": "lttb",
          "title": "LttbDecimationOptions.algorithm"
        },
        "samples": {
          "type": "number",
          "title": "LttbDecimationOptions.samples"
        }
      },
      "required": [
        "algorithm"
      ],
      "additionalProperties": false,
      "title": "LttbDecimationOptions"
    },
    "MinMaxDecimationOptions": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "const": "min-max",
          "title": "MinMaxDecimationOptions.algorithm"
        }
      },
      "required": [
        "algorithm"
      ],
      "additionalProperties": false,
      "title": "MinMaxDecimationOptions"
    },
    "BarParsedData": {
      "type": "object",
      "properties": {
        "_custom": {
          "type": "object",
          "properties": {
            "barStart": {
              "type": "number",
              "title": "BarParsedData._custom.barStart"
            },
            "barEnd": {
              "type": "number",
              "title": "BarParsedData._custom.barEnd"
            },
            "start": {
              "type": "number",
              "title": "BarParsedData._custom.start"
            },
            "end": {
              "type": "number",
              "title": "BarParsedData._custom.end"
            },
            "min": {
              "type": "number",
              "title": "BarParsedData._custom.min"
            },
            "max": {
              "type": "number",
              "title": "BarParsedData._custom.max"
            }
          },
          "required": [
            "barStart",
            "barEnd",
            "start",
            "end",
            "min",
            "max"
          ],
          "additionalProperties": false,
          "title": "BarParsedData._custom"
        }
      },
      "additionalProperties": false,
      "title": "BarParsedData"
    },
    "CartesianParsedData": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "title": "CartesianParsedData.x"
        },
        "y": {
          "type": "number",
          "title": "CartesianParsedData.y"
        },
        "_stacks": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": false
          },
          "title": "CartesianParsedData._stacks"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false,
      "title": "CartesianParsedData"
    },
    "BubbleParsedData": {
      "type": "object",
      "properties": {
        "_custom": {
          "type": "number",
          "title": "BubbleParsedData._custom"
        }
      },
      "required": [
        "_custom"
      ],
      "additionalProperties": false,
      "title": "BubbleParsedData"
    },
    "RadialParsedData": {
      "type": "object",
      "properties": {
        "r": {
          "type": "number",
          "title": "RadialParsedData.r"
        }
      },
      "required": [
        "r"
      ],
      "additionalProperties": false,
      "title": "RadialParsedData"
    }
  },
  "$id": "index.esm.json",
  "$comment": "Generated from Chart.js/types/index.esm.d.ts by core-types-json-schema (https://github.com/grantila/core-types-json-schema) on behalf of typeconv (https://github.com/grantila/typeconv)"
}
/// Generated by transpiler v0.1.0 on Fri May 27 06:16:18 UTC 2022

use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Serialize, Deserialize)]
pub struct IndexEsm {
    #[serde(rename = "definitions")]
    definitions: Definitions,
    #[serde(rename = "$id")]
    id: String,
    #[serde(rename = "$comment")]
    comment: String,
}

#[derive(Serialize, Deserialize)]
pub struct Definitions {
    #[serde(rename = "ScriptableLineSegmentContext")]
    scriptable_line_segment_context: ScriptableLineSegmentContext,
    #[serde(rename = "ParsingOptions")]
    parsing_options: ParsingOptions,
    #[serde(rename = "ControllerDatasetOptions")]
    controller_dataset_options: ControllerDatasetOptions,
    #[serde(rename = "BarControllerDatasetOptions")]
    bar_controller_dataset_options: BarControllerDatasetOptions,
    #[serde(rename = "BarControllerChartOptions")]
    bar_controller_chart_options: BarControllerChartOptions,
    #[serde(rename = "BarController")]
    bar_controller: BarController,
    #[serde(rename = "BubbleControllerDatasetOptions")]
    bubble_controller_dataset_options: BarControllerChartOptions,
    #[serde(rename = "BubbleDataPoint")]
    bubble_data_point: BubbleDataPoint,
    #[serde(rename = "BubbleController")]
    bubble_controller: BarController,
    #[serde(rename = "LineControllerDatasetOptions")]
    line_controller_dataset_options: LineControllerDatasetOptions,
    #[serde(rename = "LineControllerChartOptions")]
    line_controller_chart_options: LineControllerChartOptions,
    #[serde(rename = "LineController")]
    line_controller: BarController,
    #[serde(rename = "ScatterControllerDatasetOptions")]
    scatter_controller_dataset_options: BarController,
    #[serde(rename = "ScatterDataPoint")]
    scatter_data_point: PointProps,
    #[serde(rename = "ScatterControllerChartOptions")]
    scatter_controller_chart_options: BarController,
    #[serde(rename = "ScatterController")]
    scatter_controller: BarController,
    #[serde(rename = "DoughnutControllerDatasetOptions")]
    doughnut_controller_dataset_options: DoughnutControllerDatasetOptions,
    #[serde(rename = "DoughnutAnimationOptions")]
    doughnut_animation_options: DoughnutAnimationOptions,
    #[serde(rename = "DoughnutControllerChartOptions")]
    doughnut_controller_chart_options: DoughnutControllerChartOptions,
    #[serde(rename = "DoughnutDataPoint")]
    doughnut_data_point: DoughnutDataPoint,
    #[serde(rename = "DoughnutController")]
    doughnut_controller: DoughnutController,
    #[serde(rename = "DoughnutMetaExtensions")]
    doughnut_meta_extensions: DoughnutMetaExtensions,
    #[serde(rename = "PieControllerDatasetOptions")]
    pie_controller_dataset_options: BarController,
    #[serde(rename = "PieControllerChartOptions")]
    pie_controller_chart_options: BarController,
    #[serde(rename = "PieAnimationOptions")]
    pie_animation_options: BarController,
    #[serde(rename = "PieDataPoint")]
    pie_data_point: BarController,
    #[serde(rename = "PieMetaExtensions")]
    pie_meta_extensions: BarController,
    #[serde(rename = "PieController")]
    pie_controller: BarController,
    #[serde(rename = "PolarAreaControllerDatasetOptions")]
    polar_area_controller_dataset_options: PolarAreaControllerDatasetOptions,
    #[serde(rename = "PolarAreaAnimationOptions")]
    polar_area_animation_options: BarController,
    #[serde(rename = "PolarAreaControllerChartOptions")]
    polar_area_controller_chart_options: PolarAreaControllerChartOptions,
    #[serde(rename = "PolarAreaController")]
    polar_area_controller: BarParsedData,
    #[serde(rename = "RadarControllerDatasetOptions")]
    radar_controller_dataset_options: RadarControllerDatasetOptions,
    #[serde(rename = "RadarControllerChartOptions")]
    radar_controller_chart_options: BarController,
    #[serde(rename = "RadarController")]
    radar_controller: BarController,
    #[serde(rename = "ActiveDataPoint")]
    active_data_point: ActiveDataPoint,
    #[serde(rename = "ActiveElement")]
    active_element: ActiveElement,
    #[serde(rename = "ChartItem")]
    chart_item: ChartItem,
    #[serde(rename = "UpdateMode")]
    update_mode: ChartType,
    #[serde(rename = "DatasetControllerChartComponent")]
    dataset_controller_chart_component: DatasetControllerChartComponent,
    #[serde(rename = "Defaults")]
    defaults: Defaults,
    #[serde(rename = "Overrides")]
    overrides: ChartType,
    #[serde(rename = "InteractionOptions")]
    interaction_options: BarControllerChartOptions,
    #[serde(rename = "InteractionItem")]
    interaction_item: InteractionItem,
    #[serde(rename = "InteractionModeFunction")]
    interaction_mode_function: ChartType,
    #[serde(rename = "InteractionModeMap")]
    interaction_mode_map: InteractionModeMap,
    #[serde(rename = "InteractionMode")]
    interaction_mode: ChartType,
    #[serde(rename = "ChartComponentLike")]
    chart_component_like: ChartComponentLike,
    #[serde(rename = "Registry")]
    registry: Registry,
    #[serde(rename = "Tick")]
    tick: Tick,
    #[serde(rename = "CoreScaleOptions")]
    core_scale_options: CoreScaleOptions,
    #[serde(rename = "ScriptableScaleContext")]
    scriptable_scale_context: ScriptableScaleContext,
    #[serde(rename = "ScriptableScalePointLabelContext")]
    scriptable_scale_point_label_context: ScriptableScaleContext,
    #[serde(rename = "ChartEvent")]
    chart_event: ChartEvent,
    #[serde(rename = "ChartComponent")]
    chart_component: ChartComponent,
    #[serde(rename = "InteractionAxis")]
    interaction_axis: Align,
    #[serde(rename = "CoreInteractionOptions")]
    core_interaction_options: CoreInteractionOptions,
    #[serde(rename = "EasingFunction")]
    easing_function: Align,
    #[serde(rename = "FontSpec")]
    font_spec: FontSpec,
    #[serde(rename = "TextAlign")]
    text_align: Align,
    #[serde(rename = "Align")]
    align: Align,
    #[serde(rename = "VisualElement")]
    visual_element: BarControllerChartOptions,
    #[serde(rename = "CommonElementOptions")]
    common_element_options: CommonElementOptions,
    #[serde(rename = "CommonHoverOptions")]
    common_hover_options: CommonHoverOptions,
    #[serde(rename = "Segment")]
    segment: SegmentClass,
    #[serde(rename = "ArcProps")]
    arc_props: ArcProps,
    #[serde(rename = "ArcBorderRadius")]
    arc_border_radius: ArcBorderRadius,
    #[serde(rename = "ArcOptions")]
    arc_options: ArcOptions,
    #[serde(rename = "ArcHoverOptions")]
    arc_hover_options: ArcHoverOptions,
    #[serde(rename = "LineProps")]
    line_props: LineProps,
    #[serde(rename = "LineOptions")]
    line_options: LineOptions,
    #[serde(rename = "LineHoverOptions")]
    line_hover_options: LineHoverOptions,
    #[serde(rename = "PointProps")]
    point_props: PointProps,
    #[serde(rename = "PointStyle")]
    point_style: PointStyle,
    #[serde(rename = "PointOptions")]
    point_options: PointOptions,
    #[serde(rename = "PointHoverOptions")]
    point_hover_options: PointHoverOptions,
    #[serde(rename = "PointPrefixedOptions")]
    point_prefixed_options: PointPrefixedOptions,
    #[serde(rename = "PointPrefixedHoverOptions")]
    point_prefixed_hover_options: PointPrefixedHoverOptions,
    #[serde(rename = "BarProps")]
    bar_props: BarProps,
    #[serde(rename = "BarOptions")]
    bar_options: BarOptions,
    #[serde(rename = "BorderRadius")]
    border_radius: BorderRadiusClass,
    #[serde(rename = "BarHoverOptions")]
    bar_hover_options: BarHoverOptions,
    #[serde(rename = "DecimationOptions")]
    decimation_options: DecimationOptions,
    #[serde(rename = "FillerOptions")]
    filler_options: FillerOptions,
    #[serde(rename = "FillTarget")]
    fill_target: FillTarget,
    #[serde(rename = "ComplexFillTarget")]
    complex_fill_target: ComplexFillTarget,
    #[serde(rename = "FillerControllerDatasetOptions")]
    filler_controller_dataset_options: FillerControllerDatasetOptions,
    #[serde(rename = "LegendItem")]
    legend_item: LegendItem,
    #[serde(rename = "TitleOptions")]
    title_options: TitleOptions,
    #[serde(rename = "TooltipXAlignment")]
    tooltip_x_alignment: TooltipXAlignment,
    #[serde(rename = "TooltipYAlignment")]
    tooltip_y_alignment: TooltipXAlignment,
    #[serde(rename = "TooltipLabelStyle")]
    tooltip_label_style: TooltipLabelStyle,
    #[serde(rename = "TooltipPosition")]
    tooltip_position: TooltipPosition,
    #[serde(rename = "TooltipPositionerMap")]
    tooltip_positioner_map: TooltipPositionerMap,
    #[serde(rename = "TooltipPositioner")]
    tooltip_positioner: ChartType,
    #[serde(rename = "Tooltip")]
    tooltip: Tooltip,
    #[serde(rename = "GridLineOptions")]
    grid_line_options: GridLineOptions,
    #[serde(rename = "TickOptions")]
    tick_options: TickOptions,
    #[serde(rename = "CartesianTickOptions")]
    cartesian_tick_options: CartesianTickOptions,
    #[serde(rename = "ScriptableCartesianScaleContext")]
    scriptable_cartesian_scale_context: ScriptableCartesianScaleContext,
    #[serde(rename = "ScriptableChartContext")]
    scriptable_chart_context: ScriptableChartContext,
    #[serde(rename = "CartesianScaleOptions")]
    cartesian_scale_options: CartesianScaleOptions,
    #[serde(rename = "CategoryScaleOptions")]
    category_scale_options: CategoryScaleOptions,
    #[serde(rename = "LinearScaleOptions")]
    linear_scale_options: LinearScaleOptions,
    #[serde(rename = "LogarithmicScaleOptions")]
    logarithmic_scale_options: LogarithmicScaleOptions,
    #[serde(rename = "TimeScaleOptions")]
    time_scale_options: TimeScaleOptions,
    #[serde(rename = "RadialTickOptions")]
    radial_tick_options: RadialTickOptions,
    #[serde(rename = "RadialLinearScaleOptions")]
    radial_linear_scale_options: RadialLinearScaleOptions,
    #[serde(rename = "CartesianScaleTypeRegistry")]
    cartesian_scale_type_registry: CartesianScaleTypeRegistry,
    #[serde(rename = "RadialScaleTypeRegistry")]
    radial_scale_type_registry: RadialScaleTypeRegistry,
    #[serde(rename = "ScaleTypeRegistry")]
    scale_type_registry: ScaleTypeRegistry,
    #[serde(rename = "ScaleType")]
    scale_type: ChartType,
    #[serde(rename = "ChartTypeRegistry")]
    chart_type_registry: ChartTypeRegistry,
    #[serde(rename = "ChartType")]
    chart_type: ChartType,
    #[serde(rename = "LttbDecimationOptions")]
    lttb_decimation_options: LttbDecimationOptions,
    #[serde(rename = "MinMaxDecimationOptions")]
    min_max_decimation_options: MinMaxDecimationOptions,
    #[serde(rename = "BarParsedData")]
    bar_parsed_data: BarParsedData,
    #[serde(rename = "CartesianParsedData")]
    cartesian_parsed_data: CartesianParsedData,
    #[serde(rename = "BubbleParsedData")]
    bubble_parsed_data: BubbleParsedData,
    #[serde(rename = "RadialParsedData")]
    radial_parsed_data: RadialParsedData,
}

#[derive(Serialize, Deserialize)]
pub struct ActiveDataPoint {
    #[serde(rename = "type")]
    active_data_point_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ActiveDataPointProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ActiveDataPointProperties {
    #[serde(rename = "datasetIndex")]
    dataset_index: DoughnutDataPoint,
    #[serde(rename = "index")]
    index: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutDataPoint {
    #[serde(rename = "type")]
    doughnut_data_point_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ActiveElement {
    #[serde(rename = "type")]
    active_element_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ActiveElementProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ActiveElementProperties {
    #[serde(rename = "element")]
    element: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct BarController {
    #[serde(rename = "$ref")]
    bar_controller_ref: String,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Align {
    #[serde(rename = "type")]
    align_type: Option<TypeUnion>,
    #[serde(rename = "enum")]
    align_enum: Option<Vec<String>>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: Option<String>,
    #[serde(rename = "default")]
    align_default: Option<String>,
    #[serde(rename = "$ref")]
    align_ref: Option<String>,
    #[serde(rename = "anyOf")]
    any_of: Option<Vec<AlignAnyOf>>,
    #[serde(rename = "const")]
    align_const: Option<bool>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<AlignAdditionalProperties>,
    #[serde(rename = "items")]
    items: Option<DoughnutDataPoint>,
}

#[derive(Serialize, Deserialize)]
pub struct AlignAdditionalProperties {
    #[serde(rename = "type")]
    additional_properties_type: TypeElement,
}

#[derive(Serialize, Deserialize)]
pub struct AlignAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "enum")]
    any_of_enum: Option<Vec<String>>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "const")]
    any_of_const: Option<bool>,
    #[serde(rename = "properties")]
    properties: Option<PurpleProperties>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleProperties {
    #[serde(rename = "top")]
    top: DoughnutDataPoint,
    #[serde(rename = "right")]
    right: DoughnutDataPoint,
    #[serde(rename = "bottom")]
    bottom: DoughnutDataPoint,
    #[serde(rename = "left")]
    left: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ArcBorderRadius {
    #[serde(rename = "type")]
    arc_border_radius_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ArcBorderRadiusProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ArcBorderRadiusProperties {
    #[serde(rename = "outerStart")]
    outer_start: DoughnutDataPoint,
    #[serde(rename = "outerEnd")]
    outer_end: DoughnutDataPoint,
    #[serde(rename = "innerStart")]
    inner_start: DoughnutDataPoint,
    #[serde(rename = "innerEnd")]
    inner_end: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ArcHoverOptions {
    #[serde(rename = "type")]
    arc_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ArcHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ArcHoverOptionsProperties {
    #[serde(rename = "hoverOffset")]
    hover_offset: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ArcOptions {
    #[serde(rename = "type")]
    arc_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ArcOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ArcOptionsProperties {
    #[serde(rename = "borderAlign")]
    border_align: Align,
    #[serde(rename = "borderJoinStyle")]
    border_join_style: BorderJoinStyle,
    #[serde(rename = "borderRadius")]
    border_radius: BorderRadius,
    #[serde(rename = "offset")]
    offset: Align,
}

#[derive(Serialize, Deserialize)]
pub struct BorderJoinStyle {
    #[serde(rename = "$ref")]
    border_join_style_ref: Option<String>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
    #[serde(rename = "default")]
    border_join_style_default: Option<String>,
    #[serde(rename = "type")]
    border_join_style_type: Option<TypeElement>,
    #[serde(rename = "anyOf")]
    any_of: Option<Vec<AboveAnyOf>>,
}

#[derive(Serialize, Deserialize)]
pub struct AboveAnyOf {
    #[serde(rename = "type")]
    any_of_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "$ref")]
    any_of_ref: Option<String>,
    #[serde(rename = "const")]
    any_of_const: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct BorderRadius {
    #[serde(rename = "anyOf")]
    any_of: Option<Vec<BarPercentageAnyOf>>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: Option<String>,
    #[serde(rename = "default")]
    border_radius_default: Option<String>,
    #[serde(rename = "type")]
    border_radius_type: Option<TypeUnion>,
    #[serde(rename = "enum")]
    border_radius_enum: Option<Vec<String>>,
    #[serde(rename = "items")]
    items: Option<DoughnutDataPoint>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<AlignAdditionalProperties>,
    #[serde(rename = "$ref")]
    border_radius_ref: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct BarPercentageAnyOf {
    #[serde(rename = "type")]
    any_of_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "$ref")]
    any_of_ref: Option<String>,
    #[serde(rename = "const")]
    any_of_const: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct ArcProps {
    #[serde(rename = "type")]
    arc_props_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ArcPropsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ArcPropsProperties {
    #[serde(rename = "x")]
    x: DoughnutDataPoint,
    #[serde(rename = "y")]
    y: DoughnutDataPoint,
    #[serde(rename = "startAngle")]
    start_angle: DoughnutDataPoint,
    #[serde(rename = "endAngle")]
    end_angle: DoughnutDataPoint,
    #[serde(rename = "innerRadius")]
    inner_radius: DoughnutDataPoint,
    #[serde(rename = "outerRadius")]
    outer_radius: DoughnutDataPoint,
    #[serde(rename = "circumference")]
    circumference: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct BarControllerChartOptions {
    #[serde(rename = "type")]
    bar_controller_chart_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: Option<BarControllerChartOptionsProperties>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarControllerChartOptionsProperties {
    #[serde(rename = "skipNull")]
    skip_null: Option<Align>,
    #[serde(rename = "axis")]
    axis: Option<DoughnutDataPoint>,
    #[serde(rename = "intersect")]
    intersect: Option<DoughnutDataPoint>,
    #[serde(rename = "includeInvisible")]
    include_invisible: Option<DoughnutDataPoint>,
}

#[derive(Serialize, Deserialize)]
pub struct BarControllerDatasetOptions {
    #[serde(rename = "type")]
    bar_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BarControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarControllerDatasetOptionsProperties {
    #[serde(rename = "xAxisID")]
    x_axis_id: Align,
    #[serde(rename = "yAxisID")]
    y_axis_id: Align,
    #[serde(rename = "barPercentage")]
    bar_percentage: BorderRadius,
    #[serde(rename = "categoryPercentage")]
    category_percentage: Align,
    #[serde(rename = "barThickness")]
    bar_thickness: BarThickness,
    #[serde(rename = "maxBarThickness")]
    max_bar_thickness: Align,
    #[serde(rename = "minBarLength")]
    min_bar_length: Align,
    #[serde(rename = "pointStyle")]
    point_style: Align,
}

#[derive(Serialize, Deserialize)]
pub struct BarThickness {
    #[serde(rename = "anyOf")]
    any_of: Option<Vec<BarThicknessAnyOf>>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
    #[serde(rename = "default")]
    bar_thickness_default: Option<String>,
    #[serde(rename = "type")]
    bar_thickness_type: Option<TypeUnion>,
    #[serde(rename = "enum")]
    bar_thickness_enum: Option<Vec<String>>,
    #[serde(rename = "$ref")]
    bar_thickness_ref: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct BarThicknessAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "const")]
    any_of_const: Option<String>,
    #[serde(rename = "enum")]
    any_of_enum: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct BarHoverOptions {
    #[serde(rename = "type")]
    bar_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BarHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarHoverOptionsProperties {
    #[serde(rename = "hoverBorderRadius")]
    hover_border_radius: HoverBorderRadius,
}

#[derive(Serialize, Deserialize)]
pub struct HoverBorderRadius {
    #[serde(rename = "anyOf")]
    any_of: Vec<HoverBorderRadiusAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct HoverBorderRadiusAnyOf {
    #[serde(rename = "type")]
    any_of_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "$ref")]
    any_of_ref: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct BarOptions {
    #[serde(rename = "type")]
    bar_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BarOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarOptionsProperties {
    #[serde(rename = "base")]
    base: BorderRadius,
    #[serde(rename = "borderSkipped")]
    border_skipped: Align,
    #[serde(rename = "borderRadius")]
    border_radius: BorderRadius,
    #[serde(rename = "inflateAmount")]
    inflate_amount: BarThickness,
    #[serde(rename = "borderWidth")]
    border_width: Align,
}

#[derive(Serialize, Deserialize)]
pub struct BarParsedData {
    #[serde(rename = "type")]
    bar_parsed_data_type: TypeElement,
    #[serde(rename = "properties")]
    properties: Option<BarParsedDataProperties>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarParsedDataProperties {
    #[serde(rename = "_custom")]
    custom: Custom,
}

#[derive(Serialize, Deserialize)]
pub struct Custom {
    #[serde(rename = "type")]
    custom_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CustomProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CustomProperties {
    #[serde(rename = "barStart")]
    bar_start: DoughnutDataPoint,
    #[serde(rename = "barEnd")]
    bar_end: DoughnutDataPoint,
    #[serde(rename = "start")]
    start: DoughnutDataPoint,
    #[serde(rename = "end")]
    end: DoughnutDataPoint,
    #[serde(rename = "min")]
    min: DoughnutDataPoint,
    #[serde(rename = "max")]
    max: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct BarProps {
    #[serde(rename = "type")]
    bar_props_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BarPropsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarPropsProperties {
    #[serde(rename = "x")]
    x: DoughnutDataPoint,
    #[serde(rename = "y")]
    y: DoughnutDataPoint,
    #[serde(rename = "base")]
    base: DoughnutDataPoint,
    #[serde(rename = "horizontal")]
    horizontal: DoughnutDataPoint,
    #[serde(rename = "width")]
    width: DoughnutDataPoint,
    #[serde(rename = "height")]
    height: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct BorderRadiusClass {
    #[serde(rename = "type")]
    border_radius_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BorderRadiusProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BorderRadiusProperties {
    #[serde(rename = "topLeft")]
    top_left: DoughnutDataPoint,
    #[serde(rename = "topRight")]
    top_right: DoughnutDataPoint,
    #[serde(rename = "bottomLeft")]
    bottom_left: DoughnutDataPoint,
    #[serde(rename = "bottomRight")]
    bottom_right: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct BubbleDataPoint {
    #[serde(rename = "type")]
    bubble_data_point_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BubbleDataPointProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BubbleDataPointProperties {
    #[serde(rename = "x")]
    x: BorderRadius,
    #[serde(rename = "y")]
    y: BorderRadius,
    #[serde(rename = "r")]
    r: BorderRadius,
}

#[derive(Serialize, Deserialize)]
pub struct BubbleParsedData {
    #[serde(rename = "type")]
    bubble_parsed_data_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BubbleParsedDataProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BubbleParsedDataProperties {
    #[serde(rename = "_custom")]
    custom: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianParsedData {
    #[serde(rename = "type")]
    cartesian_parsed_data_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CartesianParsedDataProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianParsedDataProperties {
    #[serde(rename = "x")]
    x: DoughnutDataPoint,
    #[serde(rename = "y")]
    y: DoughnutDataPoint,
    #[serde(rename = "_stacks")]
    stacks: Stacks,
}

#[derive(Serialize, Deserialize)]
pub struct Stacks {
    #[serde(rename = "type")]
    stacks_type: TypeElement,
    #[serde(rename = "additionalProperties")]
    additional_properties: StacksAdditionalProperties,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct StacksAdditionalProperties {
    #[serde(rename = "type")]
    additional_properties_type: TypeElement,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianScaleOptions {
    #[serde(rename = "type")]
    cartesian_scale_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CartesianScaleOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianScaleOptionsProperties {
    #[serde(rename = "bounds")]
    bounds: Align,
    #[serde(rename = "position")]
    position: Position,
    #[serde(rename = "stack")]
    stack: BorderRadius,
    #[serde(rename = "stackWeight")]
    stack_weight: BorderRadius,
    #[serde(rename = "axis")]
    axis: Align,
    #[serde(rename = "min")]
    min: Align,
    #[serde(rename = "max")]
    max: Align,
    #[serde(rename = "offset")]
    offset: Align,
    #[serde(rename = "grid")]
    grid: BarController,
    #[serde(rename = "title")]
    title: Title,
    #[serde(rename = "stacked")]
    stacked: BorderRadius,
    #[serde(rename = "ticks")]
    ticks: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct Position {
    #[serde(rename = "anyOf")]
    any_of: Vec<Align>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct Title {
    #[serde(rename = "type")]
    title_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TitleProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct TitleProperties {
    #[serde(rename = "display")]
    display: BorderRadius,
    #[serde(rename = "align")]
    align: BorderJoinStyle,
    #[serde(rename = "text")]
    text: Text,
    #[serde(rename = "color")]
    color: BorderJoinStyle,
    #[serde(rename = "font")]
    font: Callback,
    #[serde(rename = "padding")]
    padding: PurplePadding,
}

#[derive(Serialize, Deserialize)]
pub struct Callback {
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct PurplePadding {
    #[serde(rename = "anyOf")]
    any_of: Vec<PurpleAnyOf>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "properties")]
    properties: Option<FluffyProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyProperties {
    #[serde(rename = "top")]
    top: Align,
    #[serde(rename = "bottom")]
    bottom: Align,
    #[serde(rename = "y")]
    y: Align,
}

#[derive(Serialize, Deserialize)]
pub struct Text {
    #[serde(rename = "anyOf")]
    any_of: Vec<FluffyAnyOf>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "items")]
    items: Option<DoughnutDataPoint>,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianScaleTypeRegistry {
    #[serde(rename = "type")]
    cartesian_scale_type_registry_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CartesianScaleTypeRegistryProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianScaleTypeRegistryProperties {
    #[serde(rename = "linear")]
    linear: Category,
    #[serde(rename = "logarithmic")]
    logarithmic: Category,
    #[serde(rename = "category")]
    category: Category,
    #[serde(rename = "time")]
    time: Category,
    #[serde(rename = "timeseries")]
    timeseries: Category,
}

#[derive(Serialize, Deserialize)]
pub struct Category {
    #[serde(rename = "type")]
    category_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CategoryProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CategoryProperties {
    #[serde(rename = "options")]
    options: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianTickOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<CartesianTickOptionsAllOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CartesianTickOptionsAllOf {
    #[serde(rename = "$ref")]
    all_of_ref: Option<String>,
    #[serde(rename = "type")]
    all_of_type: Option<TypeElement>,
    #[serde(rename = "properties")]
    properties: Option<HashMap<String, BorderRadius>>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct CategoryScaleOptions {
    #[serde(rename = "type")]
    category_scale_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CategoryScaleOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CategoryScaleOptionsProperties {
    #[serde(rename = "min")]
    min: Max,
    #[serde(rename = "max")]
    max: Max,
    #[serde(rename = "labels")]
    labels: Labels,
}

#[derive(Serialize, Deserialize)]
pub struct Labels {
    #[serde(rename = "anyOf")]
    any_of: Vec<LabelsAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LabelsAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "items")]
    items: BorderDash,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BorderDash {
    #[serde(rename = "type")]
    border_dash_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "items")]
    items: Option<DoughnutDataPoint>,
    #[serde(rename = "default")]
    border_dash_default: Option<String>,
    #[serde(rename = "description")]
    description: Option<String>,
    #[serde(rename = "$ref")]
    border_dash_ref: Option<String>,
    #[serde(rename = "enum")]
    border_dash_enum: Option<Vec<String>>,
    #[serde(rename = "anyOf")]
    any_of: Option<Vec<HoverBorderRadiusAnyOf>>,
}

#[derive(Serialize, Deserialize)]
pub struct Max {
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "type")]
    max_type: Vec<TypeElement>,
}

#[derive(Serialize, Deserialize)]
pub struct ChartComponent {
    #[serde(rename = "type")]
    chart_component_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ChartComponentProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartComponentProperties {
    #[serde(rename = "id")]
    id: DoughnutDataPoint,
    #[serde(rename = "defaults")]
    defaults: BarController,
    #[serde(rename = "defaultRoutes")]
    default_routes: Align,
}

#[derive(Serialize, Deserialize)]
pub struct ChartComponentLike {
    #[serde(rename = "anyOf")]
    any_of: Vec<ChartComponentLikeAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartComponentLikeAnyOf {
    #[serde(rename = "$ref")]
    any_of_ref: Option<String>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "type")]
    any_of_type: Option<TypeElement>,
    #[serde(rename = "items")]
    items: Option<BarController>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<AdditionalProperties>,
}

#[derive(Serialize, Deserialize)]
pub struct AdditionalProperties {
    #[serde(rename = "$ref")]
    additional_properties_ref: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartEvent {
    #[serde(rename = "type")]
    chart_event_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ChartEventProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartEventProperties {
    #[serde(rename = "type")]
    properties_type: Align,
    #[serde(rename = "native")]
    native: HoverBorderRadius,
    #[serde(rename = "x")]
    x: Max,
    #[serde(rename = "y")]
    y: Max,
}

#[derive(Serialize, Deserialize)]
pub struct ChartItem {
    #[serde(rename = "anyOf")]
    any_of: Vec<ChartItemAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartItemAnyOf {
    #[serde(rename = "type")]
    any_of_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "$ref")]
    any_of_ref: Option<String>,
    #[serde(rename = "properties")]
    properties: Option<TentacledProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledProperties {
    #[serde(rename = "canvas")]
    canvas: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct ChartType {
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartTypeRegistry {
    #[serde(rename = "type")]
    chart_type_registry_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ChartTypeRegistryProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ChartTypeRegistryProperties {
    #[serde(rename = "bar")]
    bar: Bar,
    #[serde(rename = "line")]
    line: Line,
    #[serde(rename = "scatter")]
    scatter: Scatter,
    #[serde(rename = "bubble")]
    bubble: Bubble,
    #[serde(rename = "pie")]
    pie: Doughnut,
    #[serde(rename = "doughnut")]
    doughnut: Doughnut,
    #[serde(rename = "polarArea")]
    polar_area: Bar,
    #[serde(rename = "radar")]
    radar: Radar,
}

#[derive(Serialize, Deserialize)]
pub struct Bar {
    #[serde(rename = "type")]
    bar_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BarProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BarProperties {
    #[serde(rename = "chartOptions")]
    chart_options: BarController,
    #[serde(rename = "datasetOptions")]
    dataset_options: BarController,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: DoughnutDataPoint,
    #[serde(rename = "metaExtensions")]
    meta_extensions: MetaExtensions,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct MetaExtensions {
    #[serde(rename = "type")]
    meta_extensions_type: TypeElement,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Bubble {
    #[serde(rename = "type")]
    bubble_type: TypeElement,
    #[serde(rename = "properties")]
    properties: BubbleProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct BubbleProperties {
    #[serde(rename = "chartOptions")]
    chart_options: ChartType,
    #[serde(rename = "datasetOptions")]
    dataset_options: BarController,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: BarController,
    #[serde(rename = "metaExtensions")]
    meta_extensions: BarParsedData,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct Doughnut {
    #[serde(rename = "type")]
    doughnut_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutProperties {
    #[serde(rename = "chartOptions")]
    chart_options: BarController,
    #[serde(rename = "datasetOptions")]
    dataset_options: BarController,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: BarController,
    #[serde(rename = "metaExtensions")]
    meta_extensions: BarController,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: DoughnutDataPoint,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct Line {
    #[serde(rename = "type")]
    line_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LineProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LineProperties {
    #[serde(rename = "chartOptions")]
    chart_options: BarController,
    #[serde(rename = "datasetOptions")]
    dataset_options: DatasetOptions,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: HoverBorderRadius,
    #[serde(rename = "metaExtensions")]
    meta_extensions: BarParsedData,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct DatasetOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<AdditionalProperties>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Radar {
    #[serde(rename = "type")]
    radar_type: TypeElement,
    #[serde(rename = "properties")]
    properties: RadarProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadarProperties {
    #[serde(rename = "chartOptions")]
    chart_options: BarController,
    #[serde(rename = "datasetOptions")]
    dataset_options: DatasetOptions,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: Max,
    #[serde(rename = "metaExtensions")]
    meta_extensions: ScaleTypeRegistry,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct ScaleTypeRegistry {
    #[serde(rename = "type")]
    scale_type_registry_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "properties")]
    properties: Option<ScaleTypeRegistryProperties>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct ScaleTypeRegistryProperties {
    #[serde(rename = "top")]
    top: Option<DoughnutDataPoint>,
    #[serde(rename = "right")]
    right: Option<DoughnutDataPoint>,
    #[serde(rename = "bottom")]
    bottom: Option<DoughnutDataPoint>,
    #[serde(rename = "left")]
    left: Option<DoughnutDataPoint>,
    #[serde(rename = "datasetElementType")]
    dataset_element_type: Option<DataElementType>,
    #[serde(rename = "dataElementType")]
    data_element_type: Option<DataElementType>,
}

#[derive(Serialize, Deserialize)]
pub struct DataElementType {
    #[serde(rename = "anyOf")]
    any_of: Vec<Align>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Scatter {
    #[serde(rename = "type")]
    scatter_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ScatterProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ScatterProperties {
    #[serde(rename = "chartOptions")]
    chart_options: BarController,
    #[serde(rename = "datasetOptions")]
    dataset_options: BarController,
    #[serde(rename = "defaultDataPoint")]
    default_data_point: HoverBorderRadius,
    #[serde(rename = "metaExtensions")]
    meta_extensions: ScaleTypeRegistry,
    #[serde(rename = "parsedDataType")]
    parsed_data_type: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct CommonElementOptions {
    #[serde(rename = "type")]
    common_element_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CommonElementOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CommonElementOptionsProperties {
    #[serde(rename = "borderWidth")]
    border_width: DoughnutDataPoint,
    #[serde(rename = "borderColor")]
    border_color: BarController,
    #[serde(rename = "backgroundColor")]
    background_color: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct CommonHoverOptions {
    #[serde(rename = "type")]
    common_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CommonHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CommonHoverOptionsProperties {
    #[serde(rename = "hoverBorderWidth")]
    hover_border_width: DoughnutDataPoint,
    #[serde(rename = "hoverBorderColor")]
    hover_border_color: BarController,
    #[serde(rename = "hoverBackgroundColor")]
    hover_background_color: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct ComplexFillTarget {
    #[serde(rename = "type")]
    complex_fill_target_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ComplexFillTargetProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ComplexFillTargetProperties {
    #[serde(rename = "target")]
    target: BorderJoinStyle,
    #[serde(rename = "above")]
    above: BorderJoinStyle,
    #[serde(rename = "below")]
    below: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct ControllerDatasetOptions {
    #[serde(rename = "type")]
    controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ControllerDatasetOptionsProperties {
    #[serde(rename = "indexAxis")]
    index_axis: BarThickness,
    #[serde(rename = "clip")]
    clip: BorderRadius,
    #[serde(rename = "label")]
    label: BarThickness,
    #[serde(rename = "order")]
    order: BarThickness,
    #[serde(rename = "stack")]
    stack: BarThickness,
    #[serde(rename = "hidden")]
    hidden: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct CoreInteractionOptions {
    #[serde(rename = "type")]
    core_interaction_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CoreInteractionOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CoreInteractionOptionsProperties {
    #[serde(rename = "mode")]
    mode: Align,
    #[serde(rename = "intersect")]
    intersect: Align,
    #[serde(rename = "axis")]
    axis: Align,
    #[serde(rename = "includeInvisible")]
    include_invisible: Align,
}

#[derive(Serialize, Deserialize)]
pub struct CoreScaleOptions {
    #[serde(rename = "type")]
    core_scale_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: CoreScaleOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct CoreScaleOptionsProperties {
    #[serde(rename = "display")]
    display: BorderRadius,
    #[serde(rename = "alignToPixels")]
    align_to_pixels: BorderRadius,
    #[serde(rename = "reverse")]
    reverse: BorderRadius,
    #[serde(rename = "weight")]
    weight: BorderRadius,
}

#[derive(Serialize, Deserialize)]
pub struct DatasetControllerChartComponent {
    #[serde(rename = "type")]
    dataset_controller_chart_component_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DatasetControllerChartComponentProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DatasetControllerChartComponentProperties {
    #[serde(rename = "defaults")]
    defaults: ScaleTypeRegistry,
}

#[derive(Serialize, Deserialize)]
pub struct DecimationOptions {
    #[serde(rename = "anyOf")]
    any_of: Vec<BarController>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Defaults {
    #[serde(rename = "type")]
    defaults_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DefaultsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DefaultsProperties {
    #[serde(rename = "scale")]
    scale: BarController,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutAnimationOptions {
    #[serde(rename = "type")]
    doughnut_animation_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutAnimationOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutAnimationOptionsProperties {
    #[serde(rename = "animateRotate")]
    animate_rotate: BarThickness,
    #[serde(rename = "animateScale")]
    animate_scale: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutController {
    #[serde(rename = "type")]
    doughnut_controller_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutControllerProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutControllerProperties {
    #[serde(rename = "innerRadius")]
    inner_radius: DoughnutDataPoint,
    #[serde(rename = "outerRadius")]
    outer_radius: DoughnutDataPoint,
    #[serde(rename = "offsetX")]
    offset_x: DoughnutDataPoint,
    #[serde(rename = "offsetY")]
    offset_y: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutControllerChartOptions {
    #[serde(rename = "type")]
    doughnut_controller_chart_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutControllerChartOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutControllerChartOptionsProperties {
    #[serde(rename = "circumference")]
    circumference: BorderRadius,
    #[serde(rename = "cutout")]
    cutout: BorderRadius,
    #[serde(rename = "offset")]
    offset: BorderRadius,
    #[serde(rename = "radius")]
    radius: BorderRadius,
    #[serde(rename = "rotation")]
    rotation: BorderRadius,
    #[serde(rename = "spacing")]
    spacing: BorderRadius,
    #[serde(rename = "animation")]
    animation: Animation,
}

#[derive(Serialize, Deserialize)]
pub struct Animation {
    #[serde(rename = "anyOf")]
    any_of: Vec<AboveAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutControllerDatasetOptions {
    #[serde(rename = "type")]
    doughnut_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutControllerDatasetOptionsProperties {
    #[serde(rename = "circumference")]
    circumference: Align,
    #[serde(rename = "offset")]
    offset: Align,
    #[serde(rename = "rotation")]
    rotation: Align,
    #[serde(rename = "weight")]
    weight: Align,
    #[serde(rename = "spacing")]
    spacing: Align,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutMetaExtensions {
    #[serde(rename = "type")]
    doughnut_meta_extensions_type: TypeElement,
    #[serde(rename = "properties")]
    properties: DoughnutMetaExtensionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct DoughnutMetaExtensionsProperties {
    #[serde(rename = "total")]
    total: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct FillTarget {
    #[serde(rename = "anyOf")]
    any_of: Vec<FillTargetAnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct FillTargetAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "properties")]
    properties: Option<StickyProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyProperties {
    #[serde(rename = "value")]
    value: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct FillerControllerDatasetOptions {
    #[serde(rename = "type")]
    filler_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: FillerControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct FillerControllerDatasetOptionsProperties {
    #[serde(rename = "fill")]
    fill: Fill,
}

#[derive(Serialize, Deserialize)]
pub struct Fill {
    #[serde(rename = "anyOf")]
    any_of: Vec<BarController>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct FillerOptions {
    #[serde(rename = "type")]
    filler_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: FillerOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct FillerOptionsProperties {
    #[serde(rename = "drawTime")]
    draw_time: Align,
    #[serde(rename = "propagate")]
    propagate: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct FontSpec {
    #[serde(rename = "type")]
    font_spec_type: TypeElement,
    #[serde(rename = "properties")]
    properties: FontSpecProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct FontSpecProperties {
    #[serde(rename = "family")]
    family: BarThickness,
    #[serde(rename = "size")]
    size: BarThickness,
    #[serde(rename = "style")]
    style: BarThickness,
    #[serde(rename = "weight")]
    weight: BarThickness,
    #[serde(rename = "lineHeight")]
    line_height: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct GridLineOptions {
    #[serde(rename = "type")]
    grid_line_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: GridLineOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct GridLineOptionsProperties {
    #[serde(rename = "display")]
    display: Align,
    #[serde(rename = "borderColor")]
    border_color: BarController,
    #[serde(rename = "borderWidth")]
    border_width: DoughnutDataPoint,
    #[serde(rename = "circular")]
    circular: BorderRadius,
    #[serde(rename = "color")]
    color: BorderDashOffset,
    #[serde(rename = "borderDash")]
    border_dash: BorderDash,
    #[serde(rename = "borderDashOffset")]
    border_dash_offset: BorderDashOffset,
    #[serde(rename = "lineWidth")]
    line_width: BorderDashOffset,
    #[serde(rename = "drawBorder")]
    draw_border: Align,
    #[serde(rename = "drawOnChartArea")]
    draw_on_chart_area: Align,
    #[serde(rename = "drawTicks")]
    draw_ticks: Align,
    #[serde(rename = "tickBorderDash")]
    tick_border_dash: Align,
    #[serde(rename = "tickBorderDashOffset")]
    tick_border_dash_offset: BorderDashOffset,
    #[serde(rename = "tickColor")]
    tick_color: BorderDashOffset,
    #[serde(rename = "tickLength")]
    tick_length: Align,
    #[serde(rename = "tickWidth")]
    tick_width: Align,
    #[serde(rename = "offset")]
    offset: Align,
    #[serde(rename = "z")]
    z: Align,
}

#[derive(Serialize, Deserialize)]
pub struct BorderDashOffset {
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "default")]
    border_dash_offset_default: String,
}

#[derive(Serialize, Deserialize)]
pub struct InteractionItem {
    #[serde(rename = "type")]
    interaction_item_type: TypeElement,
    #[serde(rename = "properties")]
    properties: InteractionItemProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct InteractionItemProperties {
    #[serde(rename = "element")]
    element: BarController,
    #[serde(rename = "datasetIndex")]
    dataset_index: DoughnutDataPoint,
    #[serde(rename = "index")]
    index: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct InteractionModeMap {
    #[serde(rename = "type")]
    interaction_mode_map_type: TypeElement,
    #[serde(rename = "properties")]
    properties: InteractionModeMapProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct InteractionModeMapProperties {
    #[serde(rename = "index")]
    index: BorderJoinStyle,
    #[serde(rename = "dataset")]
    dataset: BorderJoinStyle,
    #[serde(rename = "point")]
    point: BorderJoinStyle,
    #[serde(rename = "nearest")]
    nearest: BorderJoinStyle,
    #[serde(rename = "x")]
    x: BorderJoinStyle,
    #[serde(rename = "y")]
    y: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct LegendItem {
    #[serde(rename = "type")]
    legend_item_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LegendItemProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LegendItemProperties {
    #[serde(rename = "text")]
    text: BarThickness,
    #[serde(rename = "borderRadius")]
    border_radius: BorderRadius,
    #[serde(rename = "datasetIndex")]
    dataset_index: BorderRadius,
    #[serde(rename = "fillStyle")]
    fill_style: BorderJoinStyle,
    #[serde(rename = "fontColor")]
    font_color: BorderJoinStyle,
    #[serde(rename = "hidden")]
    hidden: BorderRadius,
    #[serde(rename = "lineCap")]
    line_cap: BorderJoinStyle,
    #[serde(rename = "lineDash")]
    line_dash: BorderRadius,
    #[serde(rename = "lineDashOffset")]
    line_dash_offset: BarThickness,
    #[serde(rename = "lineJoin")]
    line_join: BorderJoinStyle,
    #[serde(rename = "lineWidth")]
    line_width: BarThickness,
    #[serde(rename = "strokeStyle")]
    stroke_style: BorderJoinStyle,
    #[serde(rename = "pointStyle")]
    point_style: BorderJoinStyle,
    #[serde(rename = "rotation")]
    rotation: BarThickness,
    #[serde(rename = "textAlign")]
    text_align: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct LineControllerChartOptions {
    #[serde(rename = "type")]
    line_controller_chart_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LineControllerChartOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LineControllerChartOptionsProperties {
    #[serde(rename = "spanGaps")]
    span_gaps: BarThickness,
    #[serde(rename = "showLine")]
    show_line: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct LineControllerDatasetOptions {
    #[serde(rename = "type")]
    line_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LineControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LineControllerDatasetOptionsProperties {
    #[serde(rename = "xAxisID")]
    x_axis_id: Align,
    #[serde(rename = "yAxisID")]
    y_axis_id: Align,
    #[serde(rename = "spanGaps")]
    span_gaps: Align,
    #[serde(rename = "showLine")]
    show_line: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct LineHoverOptions {
    #[serde(rename = "type")]
    line_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LineHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LineHoverOptionsProperties {
    #[serde(rename = "hoverBorderCapStyle")]
    hover_border_cap_style: BarController,
    #[serde(rename = "hoverBorderDash")]
    hover_border_dash: BorderDash,
    #[serde(rename = "hoverBorderDashOffset")]
    hover_border_dash_offset: DoughnutDataPoint,
    #[serde(rename = "hoverBorderJoinStyle")]
    hover_border_join_style: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct LineOptions {
    #[serde(rename = "type")]
    line_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LineOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LineOptionsProperties {
    #[serde(rename = "borderCapStyle")]
    border_cap_style: BorderJoinStyle,
    #[serde(rename = "borderDash")]
    border_dash: BorderDash,
    #[serde(rename = "borderDashOffset")]
    border_dash_offset: BorderDash,
    #[serde(rename = "borderJoinStyle")]
    border_join_style: BorderDash,
    #[serde(rename = "capBezierPoints")]
    cap_bezier_points: BorderDash,
    #[serde(rename = "cubicInterpolationMode")]
    cubic_interpolation_mode: BorderDash,
    #[serde(rename = "tension")]
    tension: Align,
    #[serde(rename = "stepped")]
    stepped: BarThickness,
    #[serde(rename = "fill")]
    fill: Fill,
    #[serde(rename = "spanGaps")]
    span_gaps: BarThickness,
    #[serde(rename = "segment")]
    segment: Segment,
}

#[derive(Serialize, Deserialize)]
pub struct Segment {
    #[serde(rename = "type")]
    segment_type: TypeElement,
    #[serde(rename = "properties")]
    properties: SegmentProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct SegmentProperties {
    #[serde(rename = "backgroundColor")]
    background_color: ChartType,
    #[serde(rename = "borderColor")]
    border_color: ChartType,
    #[serde(rename = "borderCapStyle")]
    border_cap_style: ChartType,
    #[serde(rename = "borderDash")]
    border_dash: ChartType,
    #[serde(rename = "borderDashOffset")]
    border_dash_offset: ChartType,
    #[serde(rename = "borderJoinStyle")]
    border_join_style: ChartType,
    #[serde(rename = "borderWidth")]
    border_width: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct LineProps {
    #[serde(rename = "type")]
    line_props_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LinePropsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LinePropsProperties {
    #[serde(rename = "points")]
    points: Points,
}

#[derive(Serialize, Deserialize)]
pub struct Points {
    #[serde(rename = "type")]
    points_type: TypeElement,
    #[serde(rename = "items")]
    items: BarController,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LinearScaleOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<LinearScaleOptionsAllOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LinearScaleOptionsAllOf {
    #[serde(rename = "$ref")]
    all_of_ref: Option<String>,
    #[serde(rename = "type")]
    all_of_type: Option<TypeElement>,
    #[serde(rename = "properties")]
    properties: Option<IndigoProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoProperties {
    #[serde(rename = "beginAtZero")]
    begin_at_zero: BorderDash,
    #[serde(rename = "suggestedMin")]
    suggested_min: BarThickness,
    #[serde(rename = "suggestedMax")]
    suggested_max: BarThickness,
    #[serde(rename = "grace")]
    grace: BarThickness,
    #[serde(rename = "ticks")]
    ticks: PurpleTicks,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleTicks {
    #[serde(rename = "type")]
    ticks_type: TypeElement,
    #[serde(rename = "properties")]
    properties: IndecentProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentProperties {
    #[serde(rename = "format")]
    format: Callback,
    #[serde(rename = "precision")]
    precision: Count,
    #[serde(rename = "stepSize")]
    step_size: Count,
    #[serde(rename = "count")]
    count: Count,
    #[serde(rename = "maxTicksLimit")]
    max_ticks_limit: Option<BorderJoinStyle>,
}

#[derive(Serialize, Deserialize)]
pub struct Count {
    #[serde(rename = "type")]
    count_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct LogarithmicScaleOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<LogarithmicScaleOptionsAllOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LogarithmicScaleOptionsAllOf {
    #[serde(rename = "$ref")]
    all_of_ref: Option<String>,
    #[serde(rename = "type")]
    all_of_type: Option<TypeElement>,
    #[serde(rename = "properties")]
    properties: Option<HilariousProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousProperties {
    #[serde(rename = "suggestedMin")]
    suggested_min: BorderDash,
    #[serde(rename = "suggestedMax")]
    suggested_max: BorderDash,
    #[serde(rename = "ticks")]
    ticks: FluffyTicks,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyTicks {
    #[serde(rename = "type")]
    ticks_type: TypeElement,
    #[serde(rename = "properties")]
    properties: AmbitiousProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousProperties {
    #[serde(rename = "format")]
    format: Callback,
}

#[derive(Serialize, Deserialize)]
pub struct LttbDecimationOptions {
    #[serde(rename = "type")]
    lttb_decimation_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: LttbDecimationOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct LttbDecimationOptionsProperties {
    #[serde(rename = "algorithm")]
    algorithm: TooltipXAlignment,
    #[serde(rename = "samples")]
    samples: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipXAlignment {
    #[serde(rename = "type")]
    tooltip_x_alignment_type: Option<TypeElement>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "const")]
    tooltip_x_alignment_const: Option<Const>,
    #[serde(rename = "$ref")]
    tooltip_x_alignment_ref: Option<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<AlignAdditionalProperties>,
    #[serde(rename = "enum")]
    tooltip_x_alignment_enum: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct MinMaxDecimationOptions {
    #[serde(rename = "type")]
    min_max_decimation_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: MinMaxDecimationOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct MinMaxDecimationOptionsProperties {
    #[serde(rename = "algorithm")]
    algorithm: TooltipXAlignment,
}

#[derive(Serialize, Deserialize)]
pub struct ParsingOptions {
    #[serde(rename = "type")]
    parsing_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ParsingOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ParsingOptionsProperties {
    #[serde(rename = "parsing")]
    parsing: Parsing,
    #[serde(rename = "normalized")]
    normalized: Align,
}

#[derive(Serialize, Deserialize)]
pub struct Parsing {
    #[serde(rename = "anyOf")]
    any_of: Vec<TooltipXAlignment>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointHoverOptions {
    #[serde(rename = "type")]
    point_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointHoverOptionsProperties {
    #[serde(rename = "hoverRadius")]
    hover_radius: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct PointOptions {
    #[serde(rename = "type")]
    point_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointOptionsProperties {
    #[serde(rename = "radius")]
    radius: BarThickness,
    #[serde(rename = "hitRadius")]
    hit_radius: BarThickness,
    #[serde(rename = "pointStyle")]
    point_style: BarThickness,
    #[serde(rename = "rotation")]
    rotation: BarThickness,
    #[serde(rename = "drawActiveElementsOnTop")]
    draw_active_elements_on_top: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct PointPrefixedHoverOptions {
    #[serde(rename = "type")]
    point_prefixed_hover_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointPrefixedHoverOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointPrefixedHoverOptionsProperties {
    #[serde(rename = "pointHoverBackgroundColor")]
    point_hover_background_color: BorderDash,
    #[serde(rename = "pointHoverBorderColor")]
    point_hover_border_color: BorderDash,
    #[serde(rename = "pointHoverBorderWidth")]
    point_hover_border_width: BorderDash,
    #[serde(rename = "pointHoverRadius")]
    point_hover_radius: BorderDash,
}

#[derive(Serialize, Deserialize)]
pub struct PointPrefixedOptions {
    #[serde(rename = "type")]
    point_prefixed_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointPrefixedOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointPrefixedOptionsProperties {
    #[serde(rename = "pointBackgroundColor")]
    point_background_color: Align,
    #[serde(rename = "pointBorderColor")]
    point_border_color: Align,
    #[serde(rename = "pointBorderWidth")]
    point_border_width: Align,
    #[serde(rename = "pointHitRadius")]
    point_hit_radius: Align,
    #[serde(rename = "pointRadius")]
    point_radius: Align,
    #[serde(rename = "pointRotation")]
    point_rotation: Align,
    #[serde(rename = "pointStyle")]
    point_style: Align,
}

#[derive(Serialize, Deserialize)]
pub struct PointProps {
    #[serde(rename = "type")]
    point_props_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointPropsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointPropsProperties {
    #[serde(rename = "x")]
    x: DoughnutDataPoint,
    #[serde(rename = "y")]
    y: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct PointStyle {
    #[serde(rename = "anyOf")]
    any_of: Vec<TooltipXAlignment>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PolarAreaControllerChartOptions {
    #[serde(rename = "type")]
    polar_area_controller_chart_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PolarAreaControllerChartOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PolarAreaControllerChartOptionsProperties {
    #[serde(rename = "startAngle")]
    start_angle: BorderRadius,
    #[serde(rename = "animation")]
    animation: Animation,
}

#[derive(Serialize, Deserialize)]
pub struct PolarAreaControllerDatasetOptions {
    #[serde(rename = "type")]
    polar_area_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PolarAreaControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PolarAreaControllerDatasetOptionsProperties {
    #[serde(rename = "angle")]
    angle: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct RadarControllerDatasetOptions {
    #[serde(rename = "type")]
    radar_controller_dataset_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: RadarControllerDatasetOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadarControllerDatasetOptionsProperties {
    #[serde(rename = "xAxisID")]
    x_axis_id: BarThickness,
    #[serde(rename = "yAxisID")]
    y_axis_id: BarThickness,
    #[serde(rename = "spanGaps")]
    span_gaps: BarThickness,
    #[serde(rename = "showLine")]
    show_line: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct RadialLinearScaleOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<RadialLinearScaleOptionsAllOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadialLinearScaleOptionsAllOf {
    #[serde(rename = "$ref")]
    all_of_ref: Option<String>,
    #[serde(rename = "type")]
    all_of_type: Option<TypeElement>,
    #[serde(rename = "properties")]
    properties: Option<CunningProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct CunningProperties {
    #[serde(rename = "animate")]
    animate: DoughnutDataPoint,
    #[serde(rename = "startAngle")]
    start_angle: DoughnutDataPoint,
    #[serde(rename = "angleLines")]
    angle_lines: AngleLines,
    #[serde(rename = "beginAtZero")]
    begin_at_zero: BorderDash,
    #[serde(rename = "grid")]
    grid: BarController,
    #[serde(rename = "min")]
    min: Align,
    #[serde(rename = "max")]
    max: Align,
    #[serde(rename = "pointLabels")]
    point_labels: PointLabels,
    #[serde(rename = "suggestedMax")]
    suggested_max: BorderJoinStyle,
    #[serde(rename = "suggestedMin")]
    suggested_min: BorderJoinStyle,
    #[serde(rename = "ticks")]
    ticks: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct AngleLines {
    #[serde(rename = "type")]
    angle_lines_type: TypeElement,
    #[serde(rename = "properties")]
    properties: AngleLinesProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct AngleLinesProperties {
    #[serde(rename = "display")]
    display: BorderJoinStyle,
    #[serde(rename = "color")]
    color: BorderJoinStyle,
    #[serde(rename = "lineWidth")]
    line_width: BorderJoinStyle,
    #[serde(rename = "borderDash")]
    border_dash: BorderJoinStyle,
    #[serde(rename = "borderDashOffset")]
    border_dash_offset: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct PointLabels {
    #[serde(rename = "type")]
    point_labels_type: TypeElement,
    #[serde(rename = "properties")]
    properties: PointLabelsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct PointLabelsProperties {
    #[serde(rename = "backdropColor")]
    backdrop_color: BorderJoinStyle,
    #[serde(rename = "backdropPadding")]
    backdrop_padding: BorderJoinStyle,
    #[serde(rename = "borderRadius")]
    border_radius: BorderJoinStyle,
    #[serde(rename = "display")]
    display: BorderJoinStyle,
    #[serde(rename = "color")]
    color: Callback,
    #[serde(rename = "font")]
    font: ChartType,
    #[serde(rename = "callback")]
    callback: Callback,
    #[serde(rename = "centerPointLabels")]
    center_point_labels: BorderJoinStyle,
}

#[derive(Serialize, Deserialize)]
pub struct RadialParsedData {
    #[serde(rename = "type")]
    radial_parsed_data_type: TypeElement,
    #[serde(rename = "properties")]
    properties: RadialParsedDataProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadialParsedDataProperties {
    #[serde(rename = "r")]
    r: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct RadialScaleTypeRegistry {
    #[serde(rename = "type")]
    radial_scale_type_registry_type: TypeElement,
    #[serde(rename = "properties")]
    properties: RadialScaleTypeRegistryProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadialScaleTypeRegistryProperties {
    #[serde(rename = "radialLinear")]
    radial_linear: Category,
}

#[derive(Serialize, Deserialize)]
pub struct RadialTickOptions {
    #[serde(rename = "allOf")]
    all_of: Vec<RadialTickOptionsAllOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct RadialTickOptionsAllOf {
    #[serde(rename = "$ref")]
    all_of_ref: Option<String>,
    #[serde(rename = "type")]
    all_of_type: Option<TypeElement>,
    #[serde(rename = "properties")]
    properties: Option<IndecentProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct Registry {
    #[serde(rename = "type")]
    registry_type: TypeElement,
    #[serde(rename = "properties")]
    properties: RegistryProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct RegistryProperties {
    #[serde(rename = "controllers")]
    controllers: ChartType,
    #[serde(rename = "elements")]
    elements: ChartType,
    #[serde(rename = "plugins")]
    plugins: ChartType,
    #[serde(rename = "scales")]
    scales: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableCartesianScaleContext {
    #[serde(rename = "type")]
    scriptable_cartesian_scale_context_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ScriptableCartesianScaleContextProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableCartesianScaleContextProperties {
    #[serde(rename = "scale")]
    scale: ChartType,
    #[serde(rename = "type")]
    properties_type: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableChartContext {
    #[serde(rename = "type")]
    scriptable_chart_context_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ScriptableChartContextProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableChartContextProperties {
    #[serde(rename = "chart")]
    chart: BarController,
    #[serde(rename = "type")]
    properties_type: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableLineSegmentContext {
    #[serde(rename = "type")]
    scriptable_line_segment_context_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ScriptableLineSegmentContextProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableLineSegmentContextProperties {
    #[serde(rename = "type")]
    properties_type: TooltipXAlignment,
    #[serde(rename = "p0")]
    p0: BarController,
    #[serde(rename = "p1")]
    p1: BarController,
    #[serde(rename = "p0DataIndex")]
    p0_data_index: DoughnutDataPoint,
    #[serde(rename = "p1DataIndex")]
    p1_data_index: DoughnutDataPoint,
    #[serde(rename = "datasetIndex")]
    dataset_index: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableScaleContext {
    #[serde(rename = "type")]
    scriptable_scale_context_type: TypeElement,
    #[serde(rename = "properties")]
    properties: ScriptableScaleContextProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct ScriptableScaleContextProperties {
    #[serde(rename = "chart")]
    chart: BarController,
    #[serde(rename = "scale")]
    scale: BarController,
    #[serde(rename = "index")]
    index: DoughnutDataPoint,
    #[serde(rename = "tick")]
    tick: Option<BarController>,
    #[serde(rename = "label")]
    label: Option<DoughnutDataPoint>,
}

#[derive(Serialize, Deserialize)]
pub struct SegmentClass {
    #[serde(rename = "type")]
    segment_type: TypeElement,
    #[serde(rename = "properties")]
    properties: SegmentPropertiesClass,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct SegmentPropertiesClass {
    #[serde(rename = "start")]
    start: DoughnutDataPoint,
    #[serde(rename = "end")]
    end: DoughnutDataPoint,
    #[serde(rename = "loop")]
    properties_loop: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct Tick {
    #[serde(rename = "type")]
    tick_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TickProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TickProperties {
    #[serde(rename = "value")]
    value: DoughnutDataPoint,
    #[serde(rename = "label")]
    label: Label,
    #[serde(rename = "major")]
    major: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct Label {
    #[serde(rename = "anyOf")]
    any_of: Vec<BorderRadius>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TickOptions {
    #[serde(rename = "type")]
    tick_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TickOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TickOptionsProperties {
    #[serde(rename = "backdropColor")]
    backdrop_color: BorderDash,
    #[serde(rename = "backdropPadding")]
    backdrop_padding: BorderDash,
    #[serde(rename = "callback")]
    callback: Callback,
    #[serde(rename = "display")]
    display: BorderDash,
    #[serde(rename = "color")]
    color: Callback,
    #[serde(rename = "font")]
    font: Callback,
    #[serde(rename = "padding")]
    padding: BorderDash,
    #[serde(rename = "showLabelBackdrop")]
    show_label_backdrop: BorderDash,
    #[serde(rename = "textStrokeColor")]
    text_stroke_color: BorderDash,
    #[serde(rename = "textStrokeWidth")]
    text_stroke_width: BorderDash,
    #[serde(rename = "z")]
    z: BorderDash,
    #[serde(rename = "major")]
    major: Major,
}

#[derive(Serialize, Deserialize)]
pub struct Major {
    #[serde(rename = "type")]
    major_type: TypeElement,
    #[serde(rename = "properties")]
    properties: MajorProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct MajorProperties {
    #[serde(rename = "enabled")]
    enabled: BorderDash,
}

#[derive(Serialize, Deserialize)]
pub struct TimeScaleOptions {
    #[serde(rename = "type")]
    time_scale_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TimeScaleOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TimeScaleOptionsProperties {
    #[serde(rename = "min")]
    min: Max,
    #[serde(rename = "max")]
    max: Max,
    #[serde(rename = "suggestedMin")]
    suggested_min: Max,
    #[serde(rename = "suggestedMax")]
    suggested_max: Max,
    #[serde(rename = "bounds")]
    bounds: BarThickness,
    #[serde(rename = "offsetAfterAutoskip")]
    offset_after_autoskip: BarThickness,
    #[serde(rename = "adapters")]
    adapters: Adapters,
    #[serde(rename = "time")]
    time: Time,
    #[serde(rename = "ticks")]
    ticks: TentacledTicks,
}

#[derive(Serialize, Deserialize)]
pub struct Adapters {
    #[serde(rename = "type")]
    adapters_type: TypeElement,
    #[serde(rename = "properties")]
    properties: AdaptersProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct AdaptersProperties {
    #[serde(rename = "date")]
    date: ChartType,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledTicks {
    #[serde(rename = "type")]
    ticks_type: TypeElement,
    #[serde(rename = "properties")]
    properties: MagentaProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct MagentaProperties {
    #[serde(rename = "source")]
    source: BarThickness,
}

#[derive(Serialize, Deserialize)]
pub struct Time {
    #[serde(rename = "type")]
    time_type: TypeElement,
    #[serde(rename = "properties")]
    properties: FriskyProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct FriskyProperties {
    #[serde(rename = "parser")]
    parser: BorderRadius,
    #[serde(rename = "round")]
    round: Round,
    #[serde(rename = "isoWeekday")]
    iso_weekday: BorderRadius,
    #[serde(rename = "displayFormats")]
    display_formats: BorderRadius,
    #[serde(rename = "tooltipFormat")]
    tooltip_format: BorderJoinStyle,
    #[serde(rename = "unit")]
    unit: BorderJoinStyle,
    #[serde(rename = "stepSize")]
    step_size: BorderJoinStyle,
    #[serde(rename = "minUnit")]
    min_unit: BorderRadius,
}

#[derive(Serialize, Deserialize)]
pub struct Round {
    #[serde(rename = "anyOf")]
    any_of: Vec<AboveAnyOf>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct TitleOptions {
    #[serde(rename = "type")]
    title_options_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TitleOptionsProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TitleOptionsProperties {
    #[serde(rename = "align")]
    align: BorderJoinStyle,
    #[serde(rename = "display")]
    display: BorderJoinStyle,
    #[serde(rename = "position")]
    position: Align,
    #[serde(rename = "color")]
    color: BorderJoinStyle,
    #[serde(rename = "font")]
    font: ChartType,
    #[serde(rename = "fullSize")]
    full_size: BorderJoinStyle,
    #[serde(rename = "padding")]
    padding: FluffyPadding,
    #[serde(rename = "text")]
    text: Text,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyPadding {
    #[serde(rename = "anyOf")]
    any_of: Vec<TentacledAnyOf>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledAnyOf {
    #[serde(rename = "type")]
    any_of_type: TypeElement,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "properties")]
    properties: Option<MischievousProperties>,
    #[serde(rename = "required")]
    required: Option<Vec<String>>,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct MischievousProperties {
    #[serde(rename = "top")]
    top: DoughnutDataPoint,
    #[serde(rename = "bottom")]
    bottom: DoughnutDataPoint,
}

#[derive(Serialize, Deserialize)]
pub struct Tooltip {
    #[serde(rename = "type")]
    tooltip_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TooltipProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipProperties {
    #[serde(rename = "positioners")]
    positioners: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipLabelStyle {
    #[serde(rename = "type")]
    tooltip_label_style_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TooltipLabelStyleProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipLabelStyleProperties {
    #[serde(rename = "borderColor")]
    border_color: BarController,
    #[serde(rename = "backgroundColor")]
    background_color: BarController,
    #[serde(rename = "borderWidth")]
    border_width: BorderDash,
    #[serde(rename = "borderDash")]
    border_dash: PurpleBorderDash,
    #[serde(rename = "borderDashOffset")]
    border_dash_offset: Align,
    #[serde(rename = "borderRadius")]
    border_radius: BorderDash,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleBorderDash {
    #[serde(rename = "type")]
    border_dash_type: TypeElement,
    #[serde(rename = "items")]
    items: Vec<DoughnutDataPoint>,
    #[serde(rename = "additionalItems")]
    additional_items: bool,
    #[serde(rename = "minItems")]
    min_items: i64,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipPosition {
    #[serde(rename = "type")]
    tooltip_position_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TooltipPositionProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipPositionProperties {
    #[serde(rename = "x")]
    x: DoughnutDataPoint,
    #[serde(rename = "y")]
    y: DoughnutDataPoint,
    #[serde(rename = "xAlign")]
    x_align: BarController,
    #[serde(rename = "yAlign")]
    y_align: BarController,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipPositionerMap {
    #[serde(rename = "type")]
    tooltip_positioner_map_type: TypeElement,
    #[serde(rename = "properties")]
    properties: TooltipPositionerMapProperties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TooltipPositionerMapProperties {
    #[serde(rename = "average")]
    average: ChartType,
    #[serde(rename = "nearest")]
    nearest: ChartType,
}

#[derive(Serialize, Deserialize)]
#[serde(untagged)]
pub enum TypeUnion {
    Enum(TypeElement),
    EnumArray(Vec<TypeElement>),
}

#[derive(Serialize, Deserialize)]
#[serde(untagged)]
pub enum Const {
    Bool(bool),
    String(String),
}

#[derive(Serialize, Deserialize)]
pub enum TypeElement {
    #[serde(rename = "array")]
    Array,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "null")]
    Null,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "object")]
    Object,
    #[serde(rename = "string")]
    String,
}
/// Generated by transpiler v0.1.0 on Fri May 27 06:16:18 UTC 2022

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
pub struct Layout {
    #[serde(rename = "definitions")]
    definitions: Definitions,
    #[serde(rename = "$id")]
    id: String,
    #[serde(rename = "$comment")]
    comment: String,
}

#[derive(Serialize, Deserialize)]
pub struct Definitions {
    #[serde(rename = "LayoutPosition")]
    layout_position: LayoutPosition,
    #[serde(rename = "LayoutItem")]
    layout_item: LayoutItem,
}

#[derive(Serialize, Deserialize)]
pub struct LayoutItem {
    #[serde(rename = "type")]
    layout_item_type: String,
    #[serde(rename = "properties")]
    properties: Properties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Properties {
    #[serde(rename = "position")]
    position: Position,
    #[serde(rename = "weight")]
    weight: Bottom,
    #[serde(rename = "fullSize")]
    full_size: Bottom,
    #[serde(rename = "width")]
    width: Bottom,
    #[serde(rename = "height")]
    height: Bottom,
    #[serde(rename = "left")]
    left: Bottom,
    #[serde(rename = "top")]
    top: Bottom,
    #[serde(rename = "right")]
    right: Bottom,
    #[serde(rename = "bottom")]
    bottom: Bottom,
}

#[derive(Serialize, Deserialize)]
pub struct Bottom {
    #[serde(rename = "type")]
    bottom_type: String,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct Position {
    #[serde(rename = "$ref")]
    position_ref: String,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "description")]
    description: String,
}

#[derive(Serialize, Deserialize)]
pub struct LayoutPosition {
    #[serde(rename = "anyOf")]
    any_of: Vec<AnyOf>,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct AnyOf {
    #[serde(rename = "type")]
    any_of_type: String,
    #[serde(rename = "enum")]
    any_of_enum: Option<Vec<String>>,
    #[serde(rename = "title")]
    title: String,
    #[serde(rename = "additionalProperties")]
    additional_properties: Option<AdditionalProperties>,
}

#[derive(Serialize, Deserialize)]
pub struct AdditionalProperties {
    #[serde(rename = "type")]
    additional_properties_type: String,
}
/// Generated by transpiler v0.1.0 on Fri May 27 06:16:18 UTC 2022

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
pub struct Adapters {
    #[serde(rename = "definitions")]
    definitions: Definitions,
    #[serde(rename = "$id")]
    id: String,
    #[serde(rename = "$comment")]
    comment: String,
}

#[derive(Serialize, Deserialize)]
pub struct Definitions {
    #[serde(rename = "TimeUnit")]
    time_unit: TimeUnit,
    #[serde(rename = "DateAdapter")]
    date_adapter: DateAdapter,
}

#[derive(Serialize, Deserialize)]
pub struct DateAdapter {
    #[serde(rename = "type")]
    date_adapter_type: String,
    #[serde(rename = "properties")]
    properties: Properties,
    #[serde(rename = "required")]
    required: Vec<String>,
    #[serde(rename = "additionalProperties")]
    additional_properties: bool,
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct Properties {
    #[serde(rename = "options")]
    options: Options,
}

#[derive(Serialize, Deserialize)]
pub struct Options {
    #[serde(rename = "title")]
    title: String,
}

#[derive(Serialize, Deserialize)]
pub struct TimeUnit {
    #[serde(rename = "type")]
    time_unit_type: String,
    #[serde(rename = "enum")]
    time_unit_enum: Vec<String>,
    #[serde(rename = "title")]
    title: String,
}
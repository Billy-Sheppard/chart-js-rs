/// Generated by transpiler v0.1.0 on Fri May 27 04:21:34 UTC 2022

use serde::{Deserialize, Serialize};
extern crate serde_derive;

#[derive(Serialize, Deserialize)]
pub struct Types {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: String,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "originalName")]
    original_name: String,

    #[serde(rename = "children")]
    children: Vec<TypesChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,
}

#[derive(Serialize, Deserialize)]
pub struct TypesChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: StickyKindString,

    #[serde(rename = "flags")]
    flags: IndigoFlags,

    #[serde(rename = "children")]
    children: Option<Vec<PurpleChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "extendedBy")]
    extended_by: Option<Vec<ExtendedBy>>,

    #[serde(rename = "extendedTypes")]
    extended_types: Option<Vec<ExtendedTypeElement>>,

    #[serde(rename = "typeParameter")]
    type_parameter: Option<Vec<IndexSignatureElement>>,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,

    #[serde(rename = "type")]
    child_type: Option<Type15>,
}

#[derive(Serialize, Deserialize)]
pub struct Type15 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Option<Vec<Type21>>,

    #[serde(rename = "declaration")]
    declaration: Option<FriskyDeclaration>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<Type12>>,

    #[serde(rename = "operator")]
    operator: Option<String>,

    #[serde(rename = "target")]
    target: Option<TentacledTarget>,

    #[serde(rename = "parameter")]
    parameter: Option<ParameterEnum>,

    #[serde(rename = "parameterType")]
    parameter_type: Option<ParameterType>,

    #[serde(rename = "templateType")]
    template_type: Option<TypeTemplateType>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexType>,

    #[serde(rename = "objectType")]
    object_type: Option<FluffyObjectType>,
}

#[derive(Serialize, Deserialize)]
pub struct FriskyDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Option<Vec<MischievousChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "indexSignature")]
    index_signature: Option<TentacledIndexSignature>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<HilariousSignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct MischievousChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "type")]
    child_type: Option<Type16>,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<IndecentSignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type16 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Option<Vec<Type17>>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndexType>>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "declaration")]
    declaration: Option<MischievousDeclaration>,
}

#[derive(Serialize, Deserialize)]
pub struct MischievousDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "indexSignature")]
    index_signature: Option<FluffyIndexSignature>,

    #[serde(rename = "children")]
    children: Option<Vec<DeclarationElement>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<bool>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexType>>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleTarget {
    #[serde(rename = "type")]
    target_type: TypeEnum,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndexType>>,

    #[serde(rename = "value")]
    value: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexType>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleElementType {
    #[serde(rename = "type")]
    element_type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedBy>>,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,
}

#[derive(Serialize, Deserialize)]
pub struct ExtendedByTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<PurpleTypeArgument>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "elementType")]
    element_type: Option<PurpleElementType>,

    #[serde(rename = "types")]
    types: Option<Vec<PurpleTarget>>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<TypeArgumentQualifiedName>,

    #[serde(rename = "package")]
    package: Option<Package>,
}

#[derive(Serialize, Deserialize)]
pub struct ExtendedBy {
    #[serde(rename = "type")]
    extended_by_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedByTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexTypeClass>>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexType>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<TentacledTypeArgument>>,

    #[serde(rename = "name")]
    name: Option<PurpleName>,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedBy>>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: Option<TypeParameterKindString>,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    parameter_type: IndecentType,
}

#[derive(Serialize, Deserialize)]
pub struct ParameterElement {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    signature_type: Option<ElementType>,

    #[serde(rename = "kindString")]
    kind_string: Option<FluffyKindString>,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,

    #[serde(rename = "parameters")]
    parameters: Option<Vec<TentacledParameter>>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<ParameterElement>>,

    #[serde(rename = "children")]
    children: Option<Vec<ParameterElement>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleTypeParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    type_parameter_type: Option<StickyType>,

    #[serde(rename = "indexSignature")]
    index_signature: Option<DeclarationElement>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<DeclarationElement>>,

    #[serde(rename = "children")]
    children: Option<Vec<TypeParameterChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    parameter_type: IndexType,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,

    #[serde(rename = "parameters")]
    parameters: Vec<PurpleParameter>,

    #[serde(rename = "type")]
    signature_type: IndexTypeElement,

    #[serde(rename = "typeParameter")]
    type_parameter: Option<Vec<PurpleTypeParameter>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndexType>>,

    #[serde(rename = "elementType")]
    element_type: Option<ElementType>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexTypeClass>>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<IndigoType>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<PurpleSignature>>,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexTypeDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<ParameterElement>>,

    #[serde(rename = "children")]
    children: Option<Vec<FluffyChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexType {
    #[serde(rename = "type")]
    index_type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "elementType")]
    element_type: Option<ElementType>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<StickyTypeArgument>>,

    #[serde(rename = "declaration")]
    declaration: Option<IndexTypeDeclaration>,

    #[serde(rename = "types")]
    types: Option<Vec<HilariousType>>,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexType>>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffySignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: FluffyComment,

    #[serde(rename = "parameters")]
    parameters: Vec<FluffyParameter>,

    #[serde(rename = "type")]
    signature_type: FluffyType,
}

#[derive(Serialize, Deserialize)]
pub struct DeclarationElement {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: Option<FluffyKindString>,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "type")]
    declaration_type: Option<TentacledType>,

    #[serde(rename = "parameters")]
    parameters: Option<Vec<IndexSignatureParameter>>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<FluffySignature>>,

    #[serde(rename = "children")]
    children: Option<Vec<DeclarationElement>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexTypeClass {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: String,
}

#[derive(Serialize, Deserialize)]
pub struct ParameterTypeElementType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Vec<IndexTypeElement>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexTypeElement {
    #[serde(rename = "type")]
    target_type: TypeEnum,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct TypeParameterFlags {
}

#[derive(Serialize, Deserialize)]
pub struct ParameterComment {
    #[serde(rename = "shortText")]
    short_text: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct Group {
    #[serde(rename = "title")]
    title: Title,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "children")]
    children: Vec<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct ElementType {
    #[serde(rename = "type")]
    element_type_type: TypeEnum,

    #[serde(rename = "name")]
    name: ParameterEnum,
}

#[derive(Serialize, Deserialize)]
pub struct Source {
    #[serde(rename = "fileName")]
    file_name: FileName,

    #[serde(rename = "line")]
    line: i64,

    #[serde(rename = "character")]
    character: i64,
}

#[derive(Serialize, Deserialize)]
pub struct TypeParameterChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: ElementType,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyFlags {
    #[serde(rename = "isOptional")]
    is_optional: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<FluffyTypeArgument>>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexTypeElement>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexTypeElement>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<PurpleObjectType>,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleObjectType {
    #[serde(rename = "type")]
    object_type_type: TypeEnum,

    #[serde(rename = "indexType")]
    index_type: IndexTypeElement,

    #[serde(rename = "objectType")]
    object_type: IndexTypeElement,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyComment {
    #[serde(rename = "shortText")]
    short_text: String,

    #[serde(rename = "returns")]
    returns: String,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: ParameterComment,

    #[serde(rename = "type")]
    parameter_type: PurpleType,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "elementType")]
    element_type: Option<FluffyElementType>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyElementType {
    #[serde(rename = "type")]
    element_type_type: TypeEnum,

    #[serde(rename = "declaration")]
    declaration: PurpleDeclaration,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<TentacledChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: ElementType,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<TemplateTypeObjectType>,
}

#[derive(Serialize, Deserialize)]
pub struct TemplateTypeObjectType {
    #[serde(rename = "type")]
    object_type_type: TypeEnum,

    #[serde(rename = "indexType")]
    index_type: ElementType,

    #[serde(rename = "objectType")]
    object_type: IndexTypeElement,
}

#[derive(Serialize, Deserialize)]
pub struct IndexSignatureParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: Option<TypeParameterKindString>,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    parameter_type: IndexTypeElement,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyIndexSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "parameters")]
    parameters: Vec<IndexSignatureElement>,

    #[serde(rename = "type")]
    index_signature_type: IndexType,
}

#[derive(Serialize, Deserialize)]
pub struct IndexSignatureElement {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: Option<TypeParameterKindString>,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    type_parameter_type: Option<Type7>,

    #[serde(rename = "typeParameter")]
    type_parameter: Option<Vec<PurpleTypeParameter>>,

    #[serde(rename = "parameters")]
    parameters: Option<Vec<IndexSignatureElement>>,

    #[serde(rename = "default")]
    type_parameter_default: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct Type7 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ParameterType>>,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedBy>>,
}

#[derive(Serialize, Deserialize)]
pub struct ParameterType {
    #[serde(rename = "type")]
    parameter_type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexTypeElement>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct Type17 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<bool>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexType>>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleComment {
    #[serde(rename = "shortText")]
    short_text: Option<String>,

    #[serde(rename = "tags")]
    tags: Option<Vec<TagElement>>,
}

#[derive(Serialize, Deserialize)]
pub struct TagElement {
    #[serde(rename = "tag")]
    tag: TagEnum,

    #[serde(rename = "text")]
    text: String,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: ParameterComment,

    #[serde(rename = "parameters")]
    parameters: Vec<IndecentParameter>,

    #[serde(rename = "type")]
    signature_type: Type5,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "type")]
    parameter_type: IndexType,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,
}

#[derive(Serialize, Deserialize)]
pub struct Type5 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledIndexSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "parameters")]
    parameters: Vec<DeclarationElement>,

    #[serde(rename = "type")]
    index_signature_type: IndexType,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "parameters")]
    parameters: Vec<HilariousParameter>,

    #[serde(rename = "type")]
    signature_type: Type19,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "type")]
    parameter_type: Type18,
}

#[derive(Serialize, Deserialize)]
pub struct Type18 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,

    #[serde(rename = "operator")]
    operator: Option<String>,

    #[serde(rename = "target")]
    target: Option<FluffyTarget>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyTarget {
    #[serde(rename = "type")]
    target_type: TypeEnum,

    #[serde(rename = "elementType")]
    element_type: ExtendedBy,
}

#[derive(Serialize, Deserialize)]
pub struct Type19 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "elementType")]
    element_type: Option<IndexType>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexType>>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyObjectType {
    #[serde(rename = "type")]
    object_type_type: TypeEnum,

    #[serde(rename = "indexType")]
    index_type: Option<ExtendedBy>,

    #[serde(rename = "objectType")]
    object_type: Option<ExtendedBy>,

    #[serde(rename = "parameter")]
    parameter: Option<ParameterEnum>,

    #[serde(rename = "parameterType")]
    parameter_type: Option<ExtendedBy>,

    #[serde(rename = "templateType")]
    template_type: Option<ObjectTypeTemplateType>,
}

#[derive(Serialize, Deserialize)]
pub struct ObjectTypeTemplateType {
    #[serde(rename = "type")]
    template_type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Vec<TemplateTypeElement>,
}

#[derive(Serialize, Deserialize)]
pub struct TemplateTypeElement {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "declaration")]
    declaration: Option<BraggadociousDeclaration>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<TemplateTypeObjectType>,

    #[serde(rename = "types")]
    types: Option<Vec<TemplateTypeElement>>,
}

#[derive(Serialize, Deserialize)]
pub struct BraggadociousDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<TentacledChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledTarget {
    #[serde(rename = "type")]
    target_type: String,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "queryType")]
    query_type: Option<ExtendedBy>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct TypeTemplateType {
    #[serde(rename = "type")]
    template_type_type: TypeEnum,

    #[serde(rename = "declaration")]
    declaration: Option<DeclarationElement>,

    #[serde(rename = "types")]
    types: Option<Vec<Type20>>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<TemplateTypeTypeArgument>>,

    #[serde(rename = "name")]
    name: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct TemplateTypeTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "indexType")]
    index_type: Option<ElementType>,

    #[serde(rename = "objectType")]
    object_type: Option<IndexType>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct Type20 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<TemplateTypeObjectType>,
}

#[derive(Serialize, Deserialize)]
pub struct Type12 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<PurpleObjectType>,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,

    #[serde(rename = "declaration")]
    declaration: Option<CunningDeclaration>,

    #[serde(rename = "types")]
    types: Option<Vec<DefaultTypeArgument>>,
}

#[derive(Serialize, Deserialize)]
pub struct CunningDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<FriskyChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct FriskyChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<IndexTypeElement>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<ParameterElement>>,
}

#[derive(Serialize, Deserialize)]
pub struct DefaultTypeArgument {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<PurpleObjectType>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type21 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "declaration")]
    declaration: Option<Declaration1>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<CunningTypeArgument>>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,

    #[serde(rename = "operator")]
    operator: Option<String>,

    #[serde(rename = "target")]
    target: Option<FluffyTarget>,
}

#[derive(Serialize, Deserialize)]
pub struct Declaration1 {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Option<Vec<BraggadociousChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "indexSignature")]
    index_signature: Option<IndexSignatureElement>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<AmbitiousSignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct BraggadociousChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: ChildTypeArgument,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Option<Vec<IndexSignature>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,

    #[serde(rename = "indexSignature")]
    index_signature: Option<PurpleIndexSignature>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,
}

#[derive(Serialize, Deserialize)]
pub struct MischievousType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ChildTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<Type1>>,

    #[serde(rename = "declaration")]
    declaration: Option<TentacledDeclaration>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexSignatureChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<MischievousType>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<StickySignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndexSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: FluffyKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "type")]
    index_signature_type: Option<ExtendedBy>,

    #[serde(rename = "parameters")]
    parameters: Option<Vec<ParameterElement>>,

    #[serde(rename = "children")]
    children: Option<Vec<IndexSignatureChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct ChildTypeArgument {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndexTypeElement>>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "elementType")]
    element_type: Option<ElementType>,

    #[serde(rename = "types")]
    types: Option<Vec<BraggadociousType>>,

    #[serde(rename = "declaration")]
    declaration: Option<IndexSignature>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleIndexSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "parameters")]
    parameters: Vec<ParameterElement>,

    #[serde(rename = "type")]
    index_signature_type: ElementType,
}

#[derive(Serialize, Deserialize)]
pub struct Type1 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "declaration")]
    declaration: Option<ParameterElement>,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct StickySignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: ParameterComment,

    #[serde(rename = "parameters")]
    parameters: Vec<IndigoParameter>,

    #[serde(rename = "type")]
    signature_type: FriskyType,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    parameter_type: ElementType,
}

#[derive(Serialize, Deserialize)]
pub struct FriskyType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "types")]
    types: Vec<IndexType>,
}

#[derive(Serialize, Deserialize)]
pub struct BraggadociousType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<FluffyName>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "value")]
    value: Option<String>,

    #[serde(rename = "elementType")]
    element_type: Option<IndexType>,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "parameters")]
    parameters: Vec<IndexSignatureElement>,

    #[serde(rename = "type")]
    signature_type: ParameterTypeElementType,
}

#[derive(Serialize, Deserialize)]
pub struct CunningTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "types")]
    types: Option<Vec<PurpleTarget>>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexType>,

    #[serde(rename = "objectType")]
    object_type: Option<TentacledObjectType>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledObjectType {
    #[serde(rename = "type")]
    object_type_type: TypeEnum,

    #[serde(rename = "parameter")]
    parameter: ParameterEnum,

    #[serde(rename = "parameterType")]
    parameter_type: ExtendedBy,

    #[serde(rename = "templateType")]
    template_type: TemplateTypeElement,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: PurpleFlags,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "defaultValue")]
    default_value: Option<String>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<TentacledSignature>>,

    #[serde(rename = "inheritedFrom")]
    inherited_from: Option<ExtendedBy>,

    #[serde(rename = "type")]
    child_type: Option<Type4>,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "overwrites")]
    overwrites: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct Type4 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "elementType")]
    element_type: Option<TentacledElementType>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<HilariousTypeArgument>>,

    #[serde(rename = "declaration")]
    declaration: Option<StickyDeclaration>,

    #[serde(rename = "types")]
    types: Option<Vec<Type13>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexType>,

    #[serde(rename = "value")]
    value: Option<String>,

    #[serde(rename = "elements")]
    elements: Option<Vec<ElementType>>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "indexSignature")]
    index_signature: Option<IndexSignature>,

    #[serde(rename = "children")]
    children: Option<Vec<IndigoChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,

    #[serde(rename = "type")]
    child_type: Option<Type6>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<IndigoSignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type6 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ChildTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<Type8>>,

    #[serde(rename = "declaration")]
    declaration: Option<IndexSignatureElement>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "value")]
    value: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct Type8 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "declaration")]
    declaration: Option<IndigoDeclaration>,

    #[serde(rename = "elementType")]
    element_type: Option<ElementType>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<IndecentChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Type9,
}

#[derive(Serialize, Deserialize)]
pub struct Type9 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<TentacledName>,

    #[serde(rename = "value")]
    value: Option<String>,

    #[serde(rename = "types")]
    types: Option<Vec<BraggadociousType>>,

    #[serde(rename = "declaration")]
    declaration: Option<IndecentDeclaration>,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<HilariousChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: Option<PurpleComment>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<Type10>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<StickySignature>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type10 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ChildTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<Type11>>,

    #[serde(rename = "declaration")]
    declaration: Option<PurpleTypeParameter>,
}

#[derive(Serialize, Deserialize)]
pub struct Type11 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "declaration")]
    declaration: Option<PurpleTypeParameter>,

    #[serde(rename = "id")]
    id: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: ParameterComment,

    #[serde(rename = "parameters")]
    parameters: Vec<PurpleTypeParameter>,

    #[serde(rename = "type")]
    signature_type: Type5,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledElementType {
    #[serde(rename = "type")]
    element_type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndexType>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<PurpleTarget>,

    #[serde(rename = "declaration")]
    declaration: Option<HilariousDeclaration>,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<AmbitiousChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: IndexType,
}

#[derive(Serialize, Deserialize)]
pub struct HilariousTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "types")]
    types: Option<Vec<Type12>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexType>,

    #[serde(rename = "elementType")]
    element_type: Option<FluffyType>,

    #[serde(rename = "value")]
    value: Option<ValueEnum>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<AmbitiousTypeArgument>>,

    #[serde(rename = "declaration")]
    declaration: Option<AmbitiousDeclaration>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<TypeArgumentQualifiedName>,

    #[serde(rename = "package")]
    package: Option<Package>,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<CunningChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,
}

#[derive(Serialize, Deserialize)]
pub struct CunningChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: FluffyKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<ExtendedBy>,

    #[serde(rename = "children")]
    children: Option<Vec<MagentaChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct MagentaChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: Option<IndigoType>,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<IndexSignatureElement>>,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<ValueEnum>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<StickyName>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "indexType")]
    index_type: Option<IndexTypeClass>,

    #[serde(rename = "objectType")]
    object_type: Option<PurpleObjectType>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<DefaultTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<ElementType>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type13 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "types")]
    types: Option<Vec<Type14>>,

    #[serde(rename = "declaration")]
    declaration: Option<PurpleTypeParameter>,

    #[serde(rename = "elementType")]
    element_type: Option<ElementType>,
}

#[derive(Serialize, Deserialize)]
pub struct Type14 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<Default>>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "declaration")]
    declaration: Option<MagentaDeclaration>,
}

#[derive(Serialize, Deserialize)]
pub struct MagentaDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "children")]
    children: Vec<FriskyChild>,

    #[serde(rename = "groups")]
    groups: Vec<Group>,

    #[serde(rename = "sources")]
    sources: Option<Vec<Source>>,
}

#[derive(Serialize, Deserialize)]
pub struct Default {
    #[serde(rename = "type")]
    default_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<DefaultTypeArgument>>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "value")]
    value: Option<ValueEnum>,
}

#[derive(Serialize, Deserialize)]
pub struct PurpleFlags {
    #[serde(rename = "isReadonly")]
    is_readonly: Option<bool>,

    #[serde(rename = "isOptional")]
    is_optional: Option<bool>,

    #[serde(rename = "isStatic")]
    is_static: Option<bool>,

    #[serde(rename = "isProtected")]
    is_protected: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledSignature {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TentacledKindString,

    #[serde(rename = "flags")]
    flags: TentacledFlags,

    #[serde(rename = "parameters")]
    parameters: Option<Vec<StickyParameter>>,

    #[serde(rename = "type")]
    signature_type: MagentaType,

    #[serde(rename = "comment")]
    comment: Option<TentacledComment>,

    #[serde(rename = "inheritedFrom")]
    inherited_from: Option<ExtendedBy>,

    #[serde(rename = "typeParameter")]
    type_parameter: Option<Vec<TypeParameter>>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledComment {
    #[serde(rename = "shortText")]
    short_text: Option<String>,

    #[serde(rename = "returns")]
    returns: Option<String>,

    #[serde(rename = "text")]
    text: Option<String>,

    #[serde(rename = "tags")]
    tags: Option<Vec<TagElement>>,
}

#[derive(Serialize, Deserialize)]
pub struct TentacledFlags {
    #[serde(rename = "isProtected")]
    is_protected: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: StickyFlags,

    #[serde(rename = "type")]
    parameter_type: AmbitiousType,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyFlags {
    #[serde(rename = "isOptional")]
    is_optional: Option<bool>,

    #[serde(rename = "isRest")]
    is_rest: Option<bool>,
}

#[derive(Serialize, Deserialize)]
pub struct AmbitiousType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndigoTypeArgument>>,

    #[serde(rename = "operator")]
    operator: Option<String>,

    #[serde(rename = "target")]
    target: Option<FluffyTarget>,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedTypeElement>>,

    #[serde(rename = "declaration")]
    declaration: Option<FluffyDeclaration>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,

    #[serde(rename = "value")]
    value: Option<ValueUnion>,
}

#[derive(Serialize, Deserialize)]
pub struct FluffyDeclaration {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: DeclarationName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "signatures")]
    signatures: Option<Vec<DeclarationElement>>,

    #[serde(rename = "children")]
    children: Option<Vec<StickyChild>>,

    #[serde(rename = "groups")]
    groups: Option<Vec<Group>>,
}

#[derive(Serialize, Deserialize)]
pub struct StickyChild {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: PurpleKindString,

    #[serde(rename = "flags")]
    flags: FluffyFlags,

    #[serde(rename = "sources")]
    sources: Vec<Source>,

    #[serde(rename = "type")]
    child_type: CunningType,

    #[serde(rename = "comment")]
    comment: Option<ParameterComment>,
}

#[derive(Serialize, Deserialize)]
pub struct CunningType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndigoTypeArgument>>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<TypeQualifiedName>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "value")]
    value: Option<bool>,

    #[serde(rename = "types")]
    types: Option<Vec<IndexTypeClass>>,

    #[serde(rename = "declaration")]
    declaration: Option<PurpleDeclaration>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<IndexTypeElement>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ElementType>>,

    #[serde(rename = "value")]
    value: Option<ValueEnum>,
}

#[derive(Serialize, Deserialize)]
pub struct ExtendedTypeElement {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "value")]
    value: Option<String>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedTypeTypeArgument>>,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedBy>>,
}

#[derive(Serialize, Deserialize)]
pub struct ExtendedTypeTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndigoTypeArgument>>,

    #[serde(rename = "value")]
    value: Option<ValueEnum>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<String>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "types")]
    types: Option<Vec<ExtendedBy>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct MagentaType {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "qualifiedName")]
    qualified_name: Option<TypeQualifiedName>,

    #[serde(rename = "package")]
    package: Option<Package>,

    #[serde(rename = "declaration")]
    declaration: Option<TentacledDeclaration>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<IndecentTypeArgument>>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,

    #[serde(rename = "types")]
    types: Option<Vec<Type2>>,
}

#[derive(Serialize, Deserialize)]
pub struct IndecentTypeArgument {
    #[serde(rename = "type")]
    type_argument_type: TypeEnum,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ElementType>>,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterTypeElementType>,

    #[serde(rename = "indexType")]
    index_type: Option<ElementType>,

    #[serde(rename = "objectType")]
    object_type: Option<ExtendedBy>,

    #[serde(rename = "types")]
    types: Option<Vec<ElementType>>,
}

#[derive(Serialize, Deserialize)]
pub struct Type2 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "name")]
    name: Option<ParameterEnum>,

    #[serde(rename = "value")]
    value: Option<bool>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "elementType")]
    element_type: Option<ExtendedBy>,
}

#[derive(Serialize, Deserialize)]
pub struct TypeParameter {
    #[serde(rename = "id")]
    id: i64,

    #[serde(rename = "name")]
    name: TypeParameterName,

    #[serde(rename = "kind")]
    kind: i64,

    #[serde(rename = "kindString")]
    kind_string: TypeParameterKindString,

    #[serde(rename = "flags")]
    flags: TypeParameterFlags,

    #[serde(rename = "type")]
    type_parameter_type: Option<Type3>,

    #[serde(rename = "default")]
    type_parameter_default: Option<Default>,
}

#[derive(Serialize, Deserialize)]
pub struct Type3 {
    #[serde(rename = "type")]
    type_type: TypeEnum,

    #[serde(rename = "operator")]
    operator: Option<Operator>,

    #[serde(rename = "target")]
    target: Option<ExtendedBy>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "typeArguments")]
    type_arguments: Option<Vec<ExtendedBy>>,

    #[serde(rename = "name")]
    name: Option<TypeParameterName>,

    #[serde(rename = "elementType")]
    element_type: Option<ParameterType>,
}

#[derive(Serialize, Deserialize)]
pub struct IndigoFlags {
    #[serde(rename = "isConst")]
    is_const: Option<bool>,
}

#[derive(Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValueUnion {
    Bool(bool),

    String(String),
}

#[derive(Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "array")]
    Array,

    #[serde(rename = "indexedAccess")]
    IndexedAccess,

    #[serde(rename = "intersection")]
    Intersection,

    #[serde(rename = "intrinsic")]
    Intrinsic,

    #[serde(rename = "literal")]
    Literal,

    #[serde(rename = "mapped")]
    Mapped,

    #[serde(rename = "reference")]
    Reference,

    #[serde(rename = "reflection")]
    Reflection,

    #[serde(rename = "tuple")]
    Tuple,

    #[serde(rename = "typeOperator")]
    TypeOperator,

    #[serde(rename = "union")]
    Union,
}

#[derive(Serialize, Deserialize)]
pub enum Package {
    #[serde(rename = "typescript")]
    Typescript,
}

#[derive(Serialize, Deserialize)]
pub enum TypeParameterName {
    #[serde(rename = "AnyObject")]
    AnyObject,

    #[serde(rename = "CoreScaleOptions")]
    CoreScaleOptions,

    #[serde(rename = "DateAdapter")]
    DateAdapter,

    #[serde(rename = "Element")]
    Element,

    #[serde(rename = "LineHoverOptions")]
    LineHoverOptions,

    #[serde(rename = "LineOptions")]
    LineOptions,

    #[serde(rename = "O")]
    O,

    #[serde(rename = "P")]
    P,

    #[serde(rename = "T")]
    T,

    #[serde(rename = "TData")]
    TData,

    #[serde(rename = "TDatasetElement")]
    TDatasetElement,

    #[serde(rename = "TElement")]
    TElement,

    #[serde(rename = "TLabel")]
    TLabel,

    #[serde(rename = "TParsedData")]
    TParsedData,

    #[serde(rename = "TType")]
    TType,

    #[serde(rename = "unknown")]
    Unknown,
}

#[derive(Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "keyof")]
    Keyof,
}

#[derive(Serialize, Deserialize)]
pub enum ParameterEnum {
    #[serde(rename = "AnyObject")]
    AnyObject,

    #[serde(rename = "BarParsedData")]
    BarParsedData,

    #[serde(rename = "boolean")]
    Boolean,

    #[serde(rename = "BubbleParsedData")]
    BubbleParsedData,

    #[serde(rename = "CartesianParsedData")]
    CartesianParsedData,

    #[serde(rename = "key")]
    Key,

    #[serde(rename = "number")]
    Number,

    #[serde(rename = "P")]
    P,

    #[serde(rename = "Point")]
    Point,

    #[serde(rename = "RadialParsedData")]
    RadialParsedData,

    #[serde(rename = "string")]
    String,

    #[serde(rename = "TimeUnit")]
    TimeUnit,

    #[serde(rename = "unknown")]
    Unknown,

    #[serde(rename = "void")]
    Void,
}

#[derive(Serialize, Deserialize)]
pub enum TypeArgumentQualifiedName {
    #[serde(rename = "CanvasLineCap")]
    CanvasLineCap,

    #[serde(rename = "CanvasLineJoin")]
    CanvasLineJoin,

    #[serde(rename = "Partial")]
    Partial,
}

#[derive(Serialize, Deserialize)]
pub enum PurpleName {
    #[serde(rename = "AnimationEvent")]
    AnimationEvent,

    #[serde(rename = "Chart")]
    Chart,

    #[serde(rename = "number")]
    Number,

    #[serde(rename = "string")]
    String,

    #[serde(rename = "unknown")]
    Unknown,
}

#[derive(Serialize, Deserialize)]
pub enum TypeParameterKindString {
    #[serde(rename = "Call signature")]
    CallSignature,

    #[serde(rename = "Index signature")]
    IndexSignature,

    #[serde(rename = "Parameter")]
    Parameter,

    #[serde(rename = "Type literal")]
    TypeLiteral,

    #[serde(rename = "Type parameter")]
    TypeParameter,
}

#[derive(Serialize, Deserialize)]
pub enum Title {
    #[serde(rename = "Classes")]
    Classes,

    #[serde(rename = "Constructors")]
    Constructors,

    #[serde(rename = "Enumeration members")]
    EnumerationMembers,

    #[serde(rename = "Enumerations")]
    Enumerations,

    #[serde(rename = "Interfaces")]
    Interfaces,

    #[serde(rename = "Methods")]
    Methods,

    #[serde(rename = "Properties")]
    Properties,

    #[serde(rename = "Type aliases")]
    TypeAliases,

    #[serde(rename = "Variables")]
    Variables,
}

#[derive(Serialize, Deserialize)]
pub enum FluffyKindString {
    #[serde(rename = "Call signature")]
    CallSignature,

    #[serde(rename = "Index signature")]
    IndexSignature,

    #[serde(rename = "Method")]
    Method,

    #[serde(rename = "Parameter")]
    Parameter,

    #[serde(rename = "Property")]
    Property,

    #[serde(rename = "Type literal")]
    TypeLiteral,
}

#[derive(Serialize, Deserialize)]
pub enum FileName {
    #[serde(rename = "adapters.d.ts")]
    AdaptersDTs,

    #[serde(rename = "animation.d.ts")]
    AnimationDTs,

    #[serde(rename = "color.d.ts")]
    ColorDTs,

    #[serde(rename = "element.d.ts")]
    ElementDTs,

    #[serde(rename = "geometric.d.ts")]
    GeometricDTs,

    #[serde(rename = "index.esm.d.ts")]
    IndexEsmDTs,

    #[serde(rename = "layout.d.ts")]
    LayoutDTs,
}

#[derive(Serialize, Deserialize)]
pub enum PurpleKindString {
    #[serde(rename = "Constructor")]
    Constructor,

    #[serde(rename = "Enumeration member")]
    EnumerationMember,

    #[serde(rename = "Method")]
    Method,

    #[serde(rename = "Property")]
    Property,
}

#[derive(Serialize, Deserialize)]
pub enum DeclarationName {
    #[serde(rename = "__type")]
    Type,
}

#[derive(Serialize, Deserialize)]
pub enum TagEnum {
    #[serde(rename = "default")]
    Default,

    #[serde(rename = "deprecated")]
    Deprecated,

    #[serde(rename = "desc")]
    Desc,

    #[serde(rename = "see")]
    See,

    #[serde(rename = "since")]
    Since,

    #[serde(rename = "default:")]
    TagDefault,
}

#[derive(Serialize, Deserialize)]
pub enum FluffyName {
    #[serde(rename = "Align")]
    Align,

    #[serde(rename = "BorderRadius")]
    BorderRadius,

    #[serde(rename = "ChartArea")]
    ChartArea,

    #[serde(rename = "number")]
    Number,

    #[serde(rename = "string")]
    String,
}

#[derive(Serialize, Deserialize)]
pub enum TentacledName {
    #[serde(rename = "boolean")]
    Boolean,

    #[serde(rename = "GridLineOptions")]
    GridLineOptions,

    #[serde(rename = "number")]
    Number,

    #[serde(rename = "RadialTickOptions")]
    RadialTickOptions,
}

#[derive(Serialize, Deserialize)]
pub enum StickyName {
    #[serde(rename = "AnyObject")]
    AnyObject,

    #[serde(rename = "CoreScaleOptions")]
    CoreScaleOptions,

    #[serde(rename = "DistributiveArray")]
    DistributiveArray,

    #[serde(rename = "Element")]
    Element,

    #[serde(rename = "FontSpec")]
    FontSpec,

    #[serde(rename = "TType")]
    TType,
}

#[derive(Serialize, Deserialize)]
pub enum ValueEnum {
    #[serde(rename = "bar")]
    Bar,

    #[serde(rename = "borderWidth")]
    BorderWidth,

    #[serde(rename = "bubble")]
    Bubble,

    #[serde(rename = "doughnut")]
    Doughnut,

    #[serde(rename = "line")]
    Line,

    #[serde(rename = "radar")]
    Radar,
}

#[derive(Serialize, Deserialize)]
pub enum TentacledKindString {
    #[serde(rename = "Call signature")]
    CallSignature,

    #[serde(rename = "Constructor signature")]
    ConstructorSignature,
}

#[derive(Serialize, Deserialize)]
pub enum TypeQualifiedName {
    #[serde(rename = "CanvasRenderingContext2D")]
    CanvasRenderingContext2D,

    #[serde(rename = "Pick")]
    Pick,
}

#[derive(Serialize, Deserialize)]
pub enum StickyKindString {
    #[serde(rename = "Class")]
    Class,

    #[serde(rename = "Enumeration")]
    Enumeration,

    #[serde(rename = "Interface")]
    Interface,

    #[serde(rename = "Type alias")]
    TypeAlias,

    #[serde(rename = "Variable")]
    Variable,
}